import { z } from 'zod';
import { Address } from '@hyperlane-xyz/utils';
import { ChainName } from '../../../../types.js';
import { TxSubmitterType } from '../TxSubmitterTypes.js';
export declare const EV5GnosisSafeTxSubmitterPropsSchema: z.ZodObject<{
    chain: z.ZodString;
    safeAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    chain: string;
    safeAddress: string;
}, {
    chain: string;
    safeAddress: string;
}>;
export type EV5GnosisSafeTxSubmitterProps = z.infer<typeof EV5GnosisSafeTxSubmitterPropsSchema>;
export declare const EV5GnosisSafeTxBuilderPropsSchema: z.ZodObject<{
    version: z.ZodDefault<z.ZodString>;
    chain: z.ZodString;
    safeAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    version: string;
    chain: string;
    safeAddress: string;
}, {
    chain: string;
    safeAddress: string;
    version?: string | undefined;
}>;
export type EV5GnosisSafeTxBuilderProps = z.infer<typeof EV5GnosisSafeTxBuilderPropsSchema>;
export declare const EV5JsonRpcTxSubmitterPropsSchema: z.ZodObject<{
    chain: z.ZodString;
    userAddress: z.ZodOptional<z.ZodString>;
    privateKey: z.ZodOptional<z.ZodString>;
    extraParams: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    chain: string;
    userAddress?: string | undefined;
    privateKey?: string | undefined;
    extraParams?: Record<string, string> | undefined;
}, {
    chain: string;
    userAddress?: string | undefined;
    privateKey?: string | undefined;
    extraParams?: Record<string, string> | undefined;
}>;
export type EV5JsonRpcTxSubmitterProps = z.infer<typeof EV5JsonRpcTxSubmitterPropsSchema>;
export declare const isJsonRpcSubmitterConfig: (config: unknown) => config is {
    chain: string;
    userAddress?: string | undefined;
    privateKey?: string | undefined;
    extraParams?: Record<string, string> | undefined;
};
export declare const EV5ImpersonatedAccountTxSubmitterPropsSchema: z.ZodObject<{
    chain: z.ZodString;
    privateKey: z.ZodOptional<z.ZodString>;
    extraParams: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    userAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    chain: string;
    userAddress: string;
    privateKey?: string | undefined;
    extraParams?: Record<string, string> | undefined;
}, {
    chain: string;
    userAddress: string;
    privateKey?: string | undefined;
    extraParams?: Record<string, string> | undefined;
}>;
export type EV5ImpersonatedAccountTxSubmitterProps = z.infer<typeof EV5ImpersonatedAccountTxSubmitterPropsSchema>;
export type EvmIcaTxSubmitterProps = {
    type: TxSubmitterType.INTERCHAIN_ACCOUNT;
    chain: ChainName;
    owner: Address;
    destinationChain: ChainName;
    originInterchainAccountRouter?: Address;
    destinationInterchainAccountRouter?: Address;
    interchainSecurityModule?: Address;
    internalSubmitter: EvmSubmitterMetadata;
};
export declare const EvmIcaTxSubmitterPropsSchema: z.ZodSchema<EvmIcaTxSubmitterProps>;
export type EvmTimelockControllerSubmitterProps = {
    type: TxSubmitterType.TIMELOCK_CONTROLLER;
    chain: ChainName;
    timelockAddress: Address;
    salt?: string;
    delay?: bigint;
    predecessor?: string;
    proposerSubmitter: EvmSubmitterMetadata;
};
export declare const EvmTimelockControllerSubmitterPropsSchema: z.ZodSchema<EvmTimelockControllerSubmitterProps>;
export declare const EvmSubmitterMetadataSchema: z.ZodUnion<[z.ZodObject<{
    chain: z.ZodString;
    userAddress: z.ZodOptional<z.ZodString>;
    privateKey: z.ZodOptional<z.ZodString>;
    extraParams: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    type: z.ZodLiteral<TxSubmitterType.JSON_RPC>;
}, "strip", z.ZodTypeAny, {
    type: TxSubmitterType.JSON_RPC;
    chain: string;
    userAddress?: string | undefined;
    privateKey?: string | undefined;
    extraParams?: Record<string, string> | undefined;
}, {
    type: TxSubmitterType.JSON_RPC;
    chain: string;
    userAddress?: string | undefined;
    privateKey?: string | undefined;
    extraParams?: Record<string, string> | undefined;
}>, z.ZodObject<{
    chain: z.ZodString;
    privateKey: z.ZodOptional<z.ZodString>;
    extraParams: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    userAddress: z.ZodString;
    type: z.ZodLiteral<TxSubmitterType.IMPERSONATED_ACCOUNT>;
}, "strip", z.ZodTypeAny, {
    type: TxSubmitterType.IMPERSONATED_ACCOUNT;
    chain: string;
    userAddress: string;
    privateKey?: string | undefined;
    extraParams?: Record<string, string> | undefined;
}, {
    type: TxSubmitterType.IMPERSONATED_ACCOUNT;
    chain: string;
    userAddress: string;
    privateKey?: string | undefined;
    extraParams?: Record<string, string> | undefined;
}>, z.ZodObject<{
    chain: z.ZodString;
    safeAddress: z.ZodString;
    type: z.ZodLiteral<TxSubmitterType.GNOSIS_SAFE>;
}, "strip", z.ZodTypeAny, {
    type: TxSubmitterType.GNOSIS_SAFE;
    chain: string;
    safeAddress: string;
}, {
    type: TxSubmitterType.GNOSIS_SAFE;
    chain: string;
    safeAddress: string;
}>, z.ZodObject<{
    version: z.ZodDefault<z.ZodString>;
    chain: z.ZodString;
    safeAddress: z.ZodString;
    type: z.ZodLiteral<TxSubmitterType.GNOSIS_TX_BUILDER>;
}, "strip", z.ZodTypeAny, {
    type: TxSubmitterType.GNOSIS_TX_BUILDER;
    version: string;
    chain: string;
    safeAddress: string;
}, {
    type: TxSubmitterType.GNOSIS_TX_BUILDER;
    chain: string;
    safeAddress: string;
    version?: string | undefined;
}>, z.ZodType<EvmIcaTxSubmitterProps, z.ZodTypeDef, EvmIcaTxSubmitterProps>, z.ZodType<EvmTimelockControllerSubmitterProps, z.ZodTypeDef, EvmTimelockControllerSubmitterProps>]>;
export type EvmSubmitterMetadata = z.infer<typeof EvmSubmitterMetadataSchema>;
//# sourceMappingURL=types.d.ts.map