/// <reference types="node" resolution-mode="require"/>
import { RadixSDK } from '@hyperlane-xyz/radix-sdk';
import { Address, Domain } from '@hyperlane-xyz/utils';
import { BaseRadixAdapter } from '../../app/MultiProtocolApp.js';
import { MultiProtocolProvider } from '../../providers/MultiProtocolProvider.js';
import { RadixSDKTransaction } from '../../providers/ProviderType.js';
import { ChainName } from '../../types.js';
import { TokenMetadata } from '../types.js';
import { IHypTokenAdapter, ITokenAdapter, InterchainGasQuote, TransferParams, TransferRemoteParams } from './ITokenAdapter.js';
export declare class RadixNativeTokenAdapter extends BaseRadixAdapter implements ITokenAdapter<RadixSDKTransaction> {
    readonly chainName: ChainName;
    readonly multiProvider: MultiProtocolProvider;
    readonly addresses: {
        token: Address;
    };
    protected provider: RadixSDK;
    protected tokenId: string;
    protected getResourceAddress(): Promise<string>;
    constructor(chainName: ChainName, multiProvider: MultiProtocolProvider, addresses: {
        token: Address;
    });
    getBalance(address: string): Promise<bigint>;
    getMetadata(): Promise<TokenMetadata>;
    getMinimumTransferAmount(_recipient: Address): Promise<bigint>;
    isApproveRequired(): Promise<boolean>;
    populateApproveTx(_transferParams: TransferParams): Promise<RadixSDKTransaction>;
    isRevokeApprovalRequired(_: Address, __: Address): Promise<boolean>;
    populateTransferTx(transferParams: TransferParams): Promise<RadixSDKTransaction>;
    getTotalSupply(): Promise<bigint | undefined>;
}
export declare class RadixHypCollateralAdapter extends RadixNativeTokenAdapter implements IHypTokenAdapter<RadixSDKTransaction> {
    readonly chainName: ChainName;
    readonly multiProvider: MultiProtocolProvider;
    readonly addresses: {
        token: Address;
    };
    constructor(chainName: ChainName, multiProvider: MultiProtocolProvider, addresses: {
        token: Address;
    });
    protected getResourceAddress(): Promise<string>;
    getDomains(): Promise<Domain[]>;
    getRouterAddress(domain: Domain): Promise<Buffer>;
    getAllRouters(): Promise<Array<{
        domain: Domain;
        address: Buffer;
    }>>;
    getBridgedSupply(): Promise<bigint | undefined>;
    quoteTransferRemoteGas(destination: Domain): Promise<InterchainGasQuote>;
    populateTransferRemoteTx(params: TransferRemoteParams): Promise<RadixSDKTransaction>;
}
export declare class RadixHypSyntheticAdapter extends RadixHypCollateralAdapter {
}
//# sourceMappingURL=RadixTokenAdapter.d.ts.map