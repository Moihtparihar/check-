import { z } from 'zod';
import { CallData, HexString } from '@hyperlane-xyz/utils';
export type TimelockTx = {
    id: HexString;
    delay: number;
    predecessor: HexString;
    salt: HexString;
    data: [CallData, ...CallData[]];
};
export type ExecutableTimelockTx = TimelockTx & {
    encodedExecuteTransaction: HexString;
};
export declare const TimelockConfigSchema: z.ZodObject<{
    minimumDelay: z.ZodNumber;
    proposers: z.ZodArray<z.ZodString, "many">;
    executors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    cancellers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    admin: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    minimumDelay: number;
    proposers: string[];
    executors?: string[] | undefined;
    cancellers?: string[] | undefined;
    admin?: string | undefined;
}, {
    minimumDelay: number;
    proposers: string[];
    executors?: string[] | undefined;
    cancellers?: string[] | undefined;
    admin?: string | undefined;
}>;
export declare const TimelockConfigMapSchema: z.ZodRecord<z.ZodString, z.ZodObject<{
    minimumDelay: z.ZodNumber;
    proposers: z.ZodArray<z.ZodString, "many">;
    executors: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    cancellers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    admin: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    minimumDelay: number;
    proposers: string[];
    executors?: string[] | undefined;
    cancellers?: string[] | undefined;
    admin?: string | undefined;
}, {
    minimumDelay: number;
    proposers: string[];
    executors?: string[] | undefined;
    cancellers?: string[] | undefined;
    admin?: string | undefined;
}>>;
export type TimelockConfig = z.infer<typeof TimelockConfigSchema>;
export type TimelockConfigMap = z.infer<typeof TimelockConfigMapSchema>;
//# sourceMappingURL=types.d.ts.map