export class RadixWarpTx {
    account;
    base;
    populate;
    signer;
    constructor(account, base, signer, populate) {
        this.account = account;
        this.base = base;
        this.signer = signer;
        this.populate = populate;
    }
    async createCollateralToken({ mailbox, origin_denom, }) {
        const transactionManifest = await this.populate.createCollateralToken({
            from_address: this.account.address,
            mailbox,
            origin_denom,
        });
        const intentHashTransactionId = await this.signer.signAndBroadcast(transactionManifest);
        return this.base.getNewComponent(intentHashTransactionId);
    }
    async createSyntheticToken({ mailbox, name, symbol, description, divisibility, }) {
        const transactionManifest = await this.populate.createSyntheticToken({
            from_address: this.account.address,
            mailbox,
            name,
            symbol,
            description,
            divisibility,
        });
        const intentHashTransactionId = await this.signer.signAndBroadcast(transactionManifest);
        return this.base.getNewComponent(intentHashTransactionId);
    }
    async setTokenOwner({ token, new_owner, }) {
        const transactionManifest = await this.populate.setTokenOwner({
            from_address: this.account.address,
            token,
            new_owner,
        });
        await this.signer.signAndBroadcast(transactionManifest);
    }
    async setTokenIsm({ token, ism }) {
        const transactionManifest = await this.populate.setTokenIsm({
            from_address: this.account.address,
            token,
            ism,
        });
        await this.signer.signAndBroadcast(transactionManifest);
    }
    async enrollRemoteRouter({ token, receiver_domain, receiver_address, gas, }) {
        const transactionManifest = await this.populate.enrollRemoteRouter({
            from_address: this.account.address,
            token,
            receiver_domain,
            receiver_address,
            gas,
        });
        await this.signer.signAndBroadcast(transactionManifest);
    }
    async unenrollRemoteRouter({ token, receiver_domain, }) {
        const transactionManifest = await this.populate.unenrollRemoteRouter({
            from_address: this.account.address,
            token,
            receiver_domain,
        });
        await this.signer.signAndBroadcast(transactionManifest);
    }
}
//# sourceMappingURL=tx.js.map