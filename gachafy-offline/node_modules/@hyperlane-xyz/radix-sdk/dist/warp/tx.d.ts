import { RadixBase } from '../utils/base.js';
import { RadixSigner } from '../utils/signer.js';
import { Account } from '../utils/types.js';
import { RadixWarpPopulate } from './populate.js';
export declare class RadixWarpTx {
    private account;
    protected base: RadixBase;
    protected populate: RadixWarpPopulate;
    protected signer: RadixSigner;
    constructor(account: Account, base: RadixBase, signer: RadixSigner, populate: RadixWarpPopulate);
    createCollateralToken({ mailbox, origin_denom, }: {
        mailbox: string;
        origin_denom: string;
    }): Promise<string>;
    createSyntheticToken({ mailbox, name, symbol, description, divisibility, }: {
        mailbox: string;
        name: string;
        symbol: string;
        description: string;
        divisibility: number;
    }): Promise<string>;
    setTokenOwner({ token, new_owner, }: {
        token: string;
        new_owner: string;
    }): Promise<void>;
    setTokenIsm({ token, ism }: {
        token: string;
        ism: string;
    }): Promise<void>;
    enrollRemoteRouter({ token, receiver_domain, receiver_address, gas, }: {
        token: string;
        receiver_domain: number;
        receiver_address: string;
        gas: string;
    }): Promise<void>;
    unenrollRemoteRouter({ token, receiver_domain, }: {
        token: string;
        receiver_domain: number;
    }): Promise<void>;
}
//# sourceMappingURL=tx.d.ts.map