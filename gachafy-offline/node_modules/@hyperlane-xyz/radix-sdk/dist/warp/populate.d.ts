import { GatewayApiClient } from '@radixdlt/babylon-gateway-api-sdk';
import { RadixBase } from '../utils/base.js';
import { RadixWarpQuery } from './query.js';
export declare class RadixWarpPopulate {
    protected gateway: GatewayApiClient;
    protected base: RadixBase;
    protected query: RadixWarpQuery;
    protected packageAddress: string;
    constructor(gateway: GatewayApiClient, base: RadixBase, query: RadixWarpQuery, packageAddress: string);
    createCollateralToken({ from_address, mailbox, origin_denom, }: {
        from_address: string;
        mailbox: string;
        origin_denom: string;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    createSyntheticToken({ from_address, mailbox, name, symbol, description, divisibility, }: {
        from_address: string;
        mailbox: string;
        name: string;
        symbol: string;
        description: string;
        divisibility: number;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    setTokenOwner({ from_address, token, new_owner, }: {
        from_address: string;
        token: string;
        new_owner: string;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    setTokenIsm({ from_address, token, ism, }: {
        from_address: string;
        token: string;
        ism: string;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    enrollRemoteRouter({ from_address, token, receiver_domain, receiver_address, gas, }: {
        from_address: string;
        token: string;
        receiver_domain: number;
        receiver_address: string;
        gas: string;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    unenrollRemoteRouter({ from_address, token, receiver_domain, }: {
        from_address: string;
        token: string;
        receiver_domain: number;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    remoteTransfer({ from_address, token, destination_domain, recipient, amount, max_fee, }: {
        from_address: string;
        token: string;
        destination_domain: number;
        recipient: string;
        amount: string;
        custom_hook_id: string;
        gas_limit: string;
        custom_hook_metadata: string;
        max_fee: {
            denom: string;
            amount: string;
        };
    }): Promise<string>;
}
//# sourceMappingURL=populate.d.ts.map