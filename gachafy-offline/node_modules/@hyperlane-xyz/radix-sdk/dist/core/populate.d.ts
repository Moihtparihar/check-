import { GatewayApiClient } from '@radixdlt/babylon-gateway-api-sdk';
import { RadixBase } from '../utils/base.js';
export declare class RadixCorePopulate {
    protected gateway: GatewayApiClient;
    protected base: RadixBase;
    protected packageAddress: string;
    constructor(gateway: GatewayApiClient, base: RadixBase, packageAddress: string);
    createMailbox({ from_address, domain_id, }: {
        from_address: string;
        domain_id: number;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    createMerkleTreeHook({ from_address, mailbox, }: {
        from_address: string;
        mailbox: string;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    createMerkleRootMultisigIsm({ from_address, validators, threshold, }: {
        from_address: string;
        validators: string[];
        threshold: number;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    createMessageIdMultisigIsm({ from_address, validators, threshold, }: {
        from_address: string;
        validators: string[];
        threshold: number;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    createRoutingIsm({ from_address, routes, }: {
        from_address: string;
        routes: {
            ism: string;
            domain: number;
        }[];
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    setRoutingIsmOwner({ from_address, ism, new_owner, }: {
        from_address: string;
        ism: string;
        new_owner: string;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    createNoopIsm({ from_address }: {
        from_address: string;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    createIgp({ from_address, denom, }: {
        from_address: string;
        denom: string;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    setIgpOwner({ from_address, igp, new_owner, }: {
        from_address: string;
        igp: string;
        new_owner: string;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    setDestinationGasConfig({ from_address, igp, destination_gas_config, }: {
        from_address: string;
        igp: string;
        destination_gas_config: {
            remote_domain: string;
            gas_oracle: {
                token_exchange_rate: string;
                gas_price: string;
            };
            gas_overhead: string;
        };
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    setMailboxOwner({ from_address, mailbox, new_owner, }: {
        from_address: string;
        mailbox: string;
        new_owner: string;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    createValidatorAnnounce({ from_address, mailbox, }: {
        from_address: string;
        mailbox: string;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    setRequiredHook({ from_address, mailbox, hook, }: {
        from_address: string;
        mailbox: string;
        hook: string;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    setDefaultHook({ from_address, mailbox, hook, }: {
        from_address: string;
        mailbox: string;
        hook: string;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
    setDefaultIsm({ from_address, mailbox, ism, }: {
        from_address: string;
        mailbox: string;
        ism: string;
    }): Promise<import("@radixdlt/radix-engine-toolkit").TransactionManifest>;
}
//# sourceMappingURL=populate.d.ts.map