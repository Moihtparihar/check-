import { RadixBase } from '../utils/base.js';
import { RadixSigner } from '../utils/signer.js';
import { Account, MultisigIsmReq } from '../utils/types.js';
import { RadixCorePopulate } from './populate.js';
export declare class RadixCoreTx {
    private account;
    protected base: RadixBase;
    protected populate: RadixCorePopulate;
    protected signer: RadixSigner;
    constructor(account: Account, base: RadixBase, signer: RadixSigner, populate: RadixCorePopulate);
    transfer({ to_address, resource_address, amount, }: {
        to_address: string;
        resource_address: string;
        amount: string;
    }): Promise<void>;
    createMailbox({ domain_id }: {
        domain_id: number;
    }): Promise<string>;
    createMerkleTreeHook({ mailbox }: {
        mailbox: string;
    }): Promise<string>;
    createMerkleRootMultisigIsm({ validators, threshold, }: MultisigIsmReq): Promise<string>;
    createMessageIdMultisigIsm({ validators, threshold, }: MultisigIsmReq): Promise<string>;
    createRoutingIsm({ routes, }: {
        routes: {
            ism: string;
            domain: number;
        }[];
    }): Promise<string>;
    setRoutingIsmOwner({ ism, new_owner, }: {
        ism: string;
        new_owner: string;
    }): Promise<void>;
    createNoopIsm(): Promise<string>;
    createIgp({ denom }: {
        denom: string;
    }): Promise<string>;
    setIgpOwner({ igp, new_owner, }: {
        igp: string;
        new_owner: string;
    }): Promise<void>;
    setDestinationGasConfig({ igp, destination_gas_config, }: {
        igp: string;
        destination_gas_config: {
            remote_domain: string;
            gas_oracle: {
                token_exchange_rate: string;
                gas_price: string;
            };
            gas_overhead: string;
        };
    }): Promise<void>;
    setMailboxOwner({ mailbox, new_owner, }: {
        mailbox: string;
        new_owner: string;
    }): Promise<void>;
    createValidatorAnnounce({ mailbox }: {
        mailbox: string;
    }): Promise<string>;
    setRequiredHook({ mailbox, hook, }: {
        mailbox: string;
        hook: string;
    }): Promise<void>;
    setDefaultHook({ mailbox, hook, }: {
        mailbox: string;
        hook: string;
    }): Promise<void>;
    setDefaultIsm({ mailbox, ism, }: {
        mailbox: string;
        ism: string;
    }): Promise<void>;
}
//# sourceMappingURL=tx.d.ts.map