import { ValueKind, address, array, tuple, u32, u64, u128, } from '@radixdlt/radix-engine-toolkit';
import { strip0x } from '@hyperlane-xyz/utils';
import { INSTRUCTIONS } from '../utils/types.js';
import { bytes } from '../utils/utils.js';
export class RadixCorePopulate {
    gateway;
    base;
    packageAddress;
    constructor(gateway, base, packageAddress) {
        this.gateway = gateway;
        this.base = base;
        this.packageAddress = packageAddress;
    }
    createMailbox({ from_address, domain_id, }) {
        return this.base.createCallFunctionManifest(from_address, this.packageAddress, 'Mailbox', INSTRUCTIONS.INSTANTIATE, [u32(domain_id)]);
    }
    createMerkleTreeHook({ from_address, mailbox, }) {
        return this.base.createCallFunctionManifest(from_address, this.packageAddress, 'MerkleTreeHook', INSTRUCTIONS.INSTANTIATE, [address(mailbox)]);
    }
    createMerkleRootMultisigIsm({ from_address, validators, threshold, }) {
        return this.base.createCallFunctionManifest(from_address, this.packageAddress, 'MerkleRootMultisigIsm', INSTRUCTIONS.INSTANTIATE, [
            array(ValueKind.Array, ...validators.map((v) => bytes(strip0x(v)))),
            u64(threshold),
        ]);
    }
    createMessageIdMultisigIsm({ from_address, validators, threshold, }) {
        return this.base.createCallFunctionManifest(from_address, this.packageAddress, 'MessageIdMultisigIsm', INSTRUCTIONS.INSTANTIATE, [
            array(ValueKind.Array, ...validators.map((v) => bytes(strip0x(v)))),
            u64(threshold),
        ]);
    }
    createRoutingIsm({ from_address, routes, }) {
        return this.base.createCallFunctionManifest(from_address, this.packageAddress, 'RoutingIsm', INSTRUCTIONS.INSTANTIATE, [
            array(ValueKind.Tuple, ...routes.map((r) => tuple(u32(r.domain), address(r.ism)))),
        ]);
    }
    async setRoutingIsmOwner({ from_address, ism, new_owner, }) {
        const details = await this.gateway.state.getEntityDetailsVaultAggregated(ism);
        const resource = details.details.role_assignments.owner
            .rule.access_rule.proof_rule.requirement.resource;
        return this.base.transfer({
            from_address,
            to_address: new_owner,
            resource_address: resource,
            amount: '1',
        });
    }
    createNoopIsm({ from_address }) {
        return this.base.createCallFunctionManifest(from_address, this.packageAddress, 'NoopIsm', INSTRUCTIONS.INSTANTIATE, []);
    }
    createIgp({ from_address, denom, }) {
        return this.base.createCallFunctionManifest(from_address, this.packageAddress, 'InterchainGasPaymaster', INSTRUCTIONS.INSTANTIATE, [address(denom)]);
    }
    async setIgpOwner({ from_address, igp, new_owner, }) {
        const details = await this.gateway.state.getEntityDetailsVaultAggregated(igp);
        const resource = details.details.role_assignments.owner
            .rule.access_rule.proof_rule.requirement.resource;
        return this.base.transfer({
            from_address,
            to_address: new_owner,
            resource_address: resource,
            amount: '1',
        });
    }
    async setDestinationGasConfig({ from_address, igp, destination_gas_config, }) {
        return this.base.createCallMethodManifestWithOwner(from_address, igp, 'set_destination_gas_configs', [
            array(ValueKind.Tuple, tuple(u32(destination_gas_config.remote_domain), tuple(tuple(u128(destination_gas_config.gas_oracle.token_exchange_rate), u128(destination_gas_config.gas_oracle.gas_price)), u128(destination_gas_config.gas_overhead)))),
        ]);
    }
    async setMailboxOwner({ from_address, mailbox, new_owner, }) {
        const details = await this.gateway.state.getEntityDetailsVaultAggregated(mailbox);
        const resource = details.details.role_assignments.owner
            .rule.access_rule.proof_rule.requirement.resource;
        return this.base.transfer({
            from_address,
            to_address: new_owner,
            resource_address: resource,
            amount: '1',
        });
    }
    createValidatorAnnounce({ from_address, mailbox, }) {
        return this.base.createCallFunctionManifest(from_address, this.packageAddress, 'ValidatorAnnounce', INSTRUCTIONS.INSTANTIATE, [address(mailbox)]);
    }
    async setRequiredHook({ from_address, mailbox, hook, }) {
        return this.base.createCallMethodManifestWithOwner(from_address, mailbox, 'set_required_hook', [address(hook)]);
    }
    async setDefaultHook({ from_address, mailbox, hook, }) {
        return this.base.createCallMethodManifestWithOwner(from_address, mailbox, 'set_default_hook', [address(hook)]);
    }
    async setDefaultIsm({ from_address, mailbox, ism, }) {
        return this.base.createCallMethodManifestWithOwner(from_address, mailbox, 'set_default_ism', [address(ism)]);
    }
}
//# sourceMappingURL=populate.js.map