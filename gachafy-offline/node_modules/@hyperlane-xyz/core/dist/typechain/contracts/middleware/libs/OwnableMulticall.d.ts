import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../common.js";
export declare namespace CallLib {
    type CallStruct = {
        to: BytesLike;
        value: BigNumberish;
        data: BytesLike;
    };
    type CallStructOutput = [string, BigNumber, string] & {
        to: string;
        value: BigNumber;
        data: string;
    };
}
export interface OwnableMulticallInterface extends utils.Interface {
    functions: {
        "commitments(bytes32)": FunctionFragment;
        "multicall((bytes32,uint256,bytes)[])": FunctionFragment;
        "owner()": FunctionFragment;
        "revealAndExecute((bytes32,uint256,bytes)[],bytes32)": FunctionFragment;
        "setCommitment(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "commitments" | "commitments(bytes32)" | "multicall" | "multicall((bytes32,uint256,bytes)[])" | "owner" | "owner()" | "revealAndExecute" | "revealAndExecute((bytes32,uint256,bytes)[],bytes32)" | "setCommitment" | "setCommitment(bytes32)"): FunctionFragment;
    encodeFunctionData(functionFragment: "commitments", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "commitments(bytes32)", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "multicall", values: [CallLib.CallStruct[]]): string;
    encodeFunctionData(functionFragment: "multicall((bytes32,uint256,bytes)[])", values: [CallLib.CallStruct[]]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
    encodeFunctionData(functionFragment: "revealAndExecute", values: [CallLib.CallStruct[], BytesLike]): string;
    encodeFunctionData(functionFragment: "revealAndExecute((bytes32,uint256,bytes)[],bytes32)", values: [CallLib.CallStruct[], BytesLike]): string;
    encodeFunctionData(functionFragment: "setCommitment", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "setCommitment(bytes32)", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "commitments", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "commitments(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall((bytes32,uint256,bytes)[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revealAndExecute", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revealAndExecute((bytes32,uint256,bytes)[],bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setCommitment", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setCommitment(bytes32)", data: BytesLike): Result;
    events: {
        "CommitmentExecuted(bytes32)": EventFragment;
        "CommitmentSet(bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "CommitmentExecuted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "CommitmentExecuted(bytes32)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "CommitmentSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "CommitmentSet(bytes32)"): EventFragment;
}
export interface CommitmentExecutedEventObject {
    commitmentHash: string;
}
export type CommitmentExecutedEvent = TypedEvent<[
    string
], CommitmentExecutedEventObject>;
export type CommitmentExecutedEventFilter = TypedEventFilter<CommitmentExecutedEvent>;
export interface CommitmentSetEventObject {
    commitmentHash: string;
}
export type CommitmentSetEvent = TypedEvent<[string], CommitmentSetEventObject>;
export type CommitmentSetEventFilter = TypedEventFilter<CommitmentSetEvent>;
export interface OwnableMulticall extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OwnableMulticallInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        commitments(commitmentHash: BytesLike, overrides?: CallOverrides): Promise<[boolean] & {
            isPendingExecution: boolean;
        }>;
        "commitments(bytes32)"(commitmentHash: BytesLike, overrides?: CallOverrides): Promise<[boolean] & {
            isPendingExecution: boolean;
        }>;
        multicall(calls: CallLib.CallStruct[], overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "multicall((bytes32,uint256,bytes)[])"(calls: CallLib.CallStruct[], overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        "owner()"(overrides?: CallOverrides): Promise<[string]>;
        revealAndExecute(calls: CallLib.CallStruct[], salt: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "revealAndExecute((bytes32,uint256,bytes)[],bytes32)"(calls: CallLib.CallStruct[], salt: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setCommitment(_commitment: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setCommitment(bytes32)"(_commitment: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
    };
    commitments(commitmentHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    "commitments(bytes32)"(commitmentHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    multicall(calls: CallLib.CallStruct[], overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "multicall((bytes32,uint256,bytes)[])"(calls: CallLib.CallStruct[], overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    owner(overrides?: CallOverrides): Promise<string>;
    "owner()"(overrides?: CallOverrides): Promise<string>;
    revealAndExecute(calls: CallLib.CallStruct[], salt: BytesLike, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "revealAndExecute((bytes32,uint256,bytes)[],bytes32)"(calls: CallLib.CallStruct[], salt: BytesLike, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setCommitment(_commitment: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setCommitment(bytes32)"(_commitment: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    callStatic: {
        commitments(commitmentHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        "commitments(bytes32)"(commitmentHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        multicall(calls: CallLib.CallStruct[], overrides?: CallOverrides): Promise<void>;
        "multicall((bytes32,uint256,bytes)[])"(calls: CallLib.CallStruct[], overrides?: CallOverrides): Promise<void>;
        owner(overrides?: CallOverrides): Promise<string>;
        "owner()"(overrides?: CallOverrides): Promise<string>;
        revealAndExecute(calls: CallLib.CallStruct[], salt: BytesLike, overrides?: CallOverrides): Promise<string>;
        "revealAndExecute((bytes32,uint256,bytes)[],bytes32)"(calls: CallLib.CallStruct[], salt: BytesLike, overrides?: CallOverrides): Promise<string>;
        setCommitment(_commitment: BytesLike, overrides?: CallOverrides): Promise<void>;
        "setCommitment(bytes32)"(_commitment: BytesLike, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "CommitmentExecuted(bytes32)"(commitmentHash?: BytesLike | null): CommitmentExecutedEventFilter;
        CommitmentExecuted(commitmentHash?: BytesLike | null): CommitmentExecutedEventFilter;
        "CommitmentSet(bytes32)"(commitmentHash?: BytesLike | null): CommitmentSetEventFilter;
        CommitmentSet(commitmentHash?: BytesLike | null): CommitmentSetEventFilter;
    };
    estimateGas: {
        commitments(commitmentHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "commitments(bytes32)"(commitmentHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        multicall(calls: CallLib.CallStruct[], overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        "multicall((bytes32,uint256,bytes)[])"(calls: CallLib.CallStruct[], overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        "owner()"(overrides?: CallOverrides): Promise<BigNumber>;
        revealAndExecute(calls: CallLib.CallStruct[], salt: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        "revealAndExecute((bytes32,uint256,bytes)[],bytes32)"(calls: CallLib.CallStruct[], salt: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        setCommitment(_commitment: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setCommitment(bytes32)"(_commitment: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        commitments(commitmentHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "commitments(bytes32)"(commitmentHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        multicall(calls: CallLib.CallStruct[], overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "multicall((bytes32,uint256,bytes)[])"(calls: CallLib.CallStruct[], overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        revealAndExecute(calls: CallLib.CallStruct[], salt: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "revealAndExecute((bytes32,uint256,bytes)[],bytes32)"(calls: CallLib.CallStruct[], salt: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setCommitment(_commitment: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setCommitment(bytes32)"(_commitment: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=OwnableMulticall.d.ts.map