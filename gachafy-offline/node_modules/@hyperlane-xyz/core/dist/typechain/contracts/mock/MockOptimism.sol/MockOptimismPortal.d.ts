import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../common.js";
export declare namespace IOptimismPortal {
    type WithdrawalTransactionStruct = {
        nonce: BigNumberish;
        sender: string;
        target: string;
        value: BigNumberish;
        gasLimit: BigNumberish;
        data: BytesLike;
    };
    type WithdrawalTransactionStructOutput = [
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string
    ] & {
        nonce: BigNumber;
        sender: string;
        target: string;
        value: BigNumber;
        gasLimit: BigNumber;
        data: string;
    };
    type OutputRootProofStruct = {
        version: BytesLike;
        stateRoot: BytesLike;
        messagePasserStorageRoot: BytesLike;
        latestBlockhash: BytesLike;
    };
    type OutputRootProofStructOutput = [string, string, string, string] & {
        version: string;
        stateRoot: string;
        messagePasserStorageRoot: string;
        latestBlockhash: string;
    };
    type ProvenWithdrawalStruct = {
        outputRoot: BytesLike;
        timestamp: BigNumberish;
        l2OutputIndex: BigNumberish;
    };
    type ProvenWithdrawalStructOutput = [string, BigNumber, BigNumber] & {
        outputRoot: string;
        timestamp: BigNumber;
        l2OutputIndex: BigNumber;
    };
}
export interface MockOptimismPortalInterface extends utils.Interface {
    functions: {
        "_finalizedWithdrawals(bytes32)": FunctionFragment;
        "_provenWithdrawals(bytes32)": FunctionFragment;
        "finalizeWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes))": FunctionFragment;
        "finalizedWithdrawals(bytes32)": FunctionFragment;
        "proveWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes),uint256,(bytes32,bytes32,bytes32,bytes32),bytes[])": FunctionFragment;
        "provenWithdrawals(bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "_finalizedWithdrawals" | "_finalizedWithdrawals(bytes32)" | "_provenWithdrawals" | "_provenWithdrawals(bytes32)" | "finalizeWithdrawalTransaction" | "finalizeWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes))" | "finalizedWithdrawals" | "finalizedWithdrawals(bytes32)" | "proveWithdrawalTransaction" | "proveWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes),uint256,(bytes32,bytes32,bytes32,bytes32),bytes[])" | "provenWithdrawals" | "provenWithdrawals(bytes32)"): FunctionFragment;
    encodeFunctionData(functionFragment: "_finalizedWithdrawals", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "_finalizedWithdrawals(bytes32)", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "_provenWithdrawals", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "_provenWithdrawals(bytes32)", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "finalizeWithdrawalTransaction", values: [IOptimismPortal.WithdrawalTransactionStruct]): string;
    encodeFunctionData(functionFragment: "finalizeWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes))", values: [IOptimismPortal.WithdrawalTransactionStruct]): string;
    encodeFunctionData(functionFragment: "finalizedWithdrawals", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "finalizedWithdrawals(bytes32)", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "proveWithdrawalTransaction", values: [
        IOptimismPortal.WithdrawalTransactionStruct,
        BigNumberish,
        IOptimismPortal.OutputRootProofStruct,
        BytesLike[]
    ]): string;
    encodeFunctionData(functionFragment: "proveWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes),uint256,(bytes32,bytes32,bytes32,bytes32),bytes[])", values: [
        IOptimismPortal.WithdrawalTransactionStruct,
        BigNumberish,
        IOptimismPortal.OutputRootProofStruct,
        BytesLike[]
    ]): string;
    encodeFunctionData(functionFragment: "provenWithdrawals", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "provenWithdrawals(bytes32)", values: [BytesLike]): string;
    decodeFunctionResult(functionFragment: "_finalizedWithdrawals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "_finalizedWithdrawals(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "_provenWithdrawals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "_provenWithdrawals(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeWithdrawalTransaction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes))", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizedWithdrawals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizedWithdrawals(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proveWithdrawalTransaction", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proveWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes),uint256,(bytes32,bytes32,bytes32,bytes32),bytes[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "provenWithdrawals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "provenWithdrawals(bytes32)", data: BytesLike): Result;
    events: {};
}
export interface MockOptimismPortal extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MockOptimismPortalInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        _finalizedWithdrawals(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        "_finalizedWithdrawals(bytes32)"(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        _provenWithdrawals(arg0: BytesLike, overrides?: CallOverrides): Promise<[
            string,
            BigNumber,
            BigNumber
        ] & {
            outputRoot: string;
            timestamp: BigNumber;
            l2OutputIndex: BigNumber;
        }>;
        "_provenWithdrawals(bytes32)"(arg0: BytesLike, overrides?: CallOverrides): Promise<[
            string,
            BigNumber,
            BigNumber
        ] & {
            outputRoot: string;
            timestamp: BigNumber;
            l2OutputIndex: BigNumber;
        }>;
        finalizeWithdrawalTransaction(_tx: IOptimismPortal.WithdrawalTransactionStruct, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "finalizeWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes))"(_tx: IOptimismPortal.WithdrawalTransactionStruct, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        finalizedWithdrawals(_withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<[boolean] & {
            value: boolean;
        }>;
        "finalizedWithdrawals(bytes32)"(_withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<[boolean] & {
            value: boolean;
        }>;
        proveWithdrawalTransaction(_tx: IOptimismPortal.WithdrawalTransactionStruct, _disputeGameIndex: BigNumberish, _outputRootProof: IOptimismPortal.OutputRootProofStruct, _withdrawalProof: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "proveWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes),uint256,(bytes32,bytes32,bytes32,bytes32),bytes[])"(_tx: IOptimismPortal.WithdrawalTransactionStruct, _disputeGameIndex: BigNumberish, _outputRootProof: IOptimismPortal.OutputRootProofStruct, _withdrawalProof: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        provenWithdrawals(withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<[IOptimismPortal.ProvenWithdrawalStructOutput]>;
        "provenWithdrawals(bytes32)"(withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<[IOptimismPortal.ProvenWithdrawalStructOutput]>;
    };
    _finalizedWithdrawals(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    "_finalizedWithdrawals(bytes32)"(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    _provenWithdrawals(arg0: BytesLike, overrides?: CallOverrides): Promise<[
        string,
        BigNumber,
        BigNumber
    ] & {
        outputRoot: string;
        timestamp: BigNumber;
        l2OutputIndex: BigNumber;
    }>;
    "_provenWithdrawals(bytes32)"(arg0: BytesLike, overrides?: CallOverrides): Promise<[
        string,
        BigNumber,
        BigNumber
    ] & {
        outputRoot: string;
        timestamp: BigNumber;
        l2OutputIndex: BigNumber;
    }>;
    finalizeWithdrawalTransaction(_tx: IOptimismPortal.WithdrawalTransactionStruct, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "finalizeWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes))"(_tx: IOptimismPortal.WithdrawalTransactionStruct, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    finalizedWithdrawals(_withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    "finalizedWithdrawals(bytes32)"(_withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    proveWithdrawalTransaction(_tx: IOptimismPortal.WithdrawalTransactionStruct, _disputeGameIndex: BigNumberish, _outputRootProof: IOptimismPortal.OutputRootProofStruct, _withdrawalProof: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "proveWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes),uint256,(bytes32,bytes32,bytes32,bytes32),bytes[])"(_tx: IOptimismPortal.WithdrawalTransactionStruct, _disputeGameIndex: BigNumberish, _outputRootProof: IOptimismPortal.OutputRootProofStruct, _withdrawalProof: BytesLike[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    provenWithdrawals(withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<IOptimismPortal.ProvenWithdrawalStructOutput>;
    "provenWithdrawals(bytes32)"(withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<IOptimismPortal.ProvenWithdrawalStructOutput>;
    callStatic: {
        _finalizedWithdrawals(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        "_finalizedWithdrawals(bytes32)"(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        _provenWithdrawals(arg0: BytesLike, overrides?: CallOverrides): Promise<[
            string,
            BigNumber,
            BigNumber
        ] & {
            outputRoot: string;
            timestamp: BigNumber;
            l2OutputIndex: BigNumber;
        }>;
        "_provenWithdrawals(bytes32)"(arg0: BytesLike, overrides?: CallOverrides): Promise<[
            string,
            BigNumber,
            BigNumber
        ] & {
            outputRoot: string;
            timestamp: BigNumber;
            l2OutputIndex: BigNumber;
        }>;
        finalizeWithdrawalTransaction(_tx: IOptimismPortal.WithdrawalTransactionStruct, overrides?: CallOverrides): Promise<void>;
        "finalizeWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes))"(_tx: IOptimismPortal.WithdrawalTransactionStruct, overrides?: CallOverrides): Promise<void>;
        finalizedWithdrawals(_withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        "finalizedWithdrawals(bytes32)"(_withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        proveWithdrawalTransaction(_tx: IOptimismPortal.WithdrawalTransactionStruct, _disputeGameIndex: BigNumberish, _outputRootProof: IOptimismPortal.OutputRootProofStruct, _withdrawalProof: BytesLike[], overrides?: CallOverrides): Promise<void>;
        "proveWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes),uint256,(bytes32,bytes32,bytes32,bytes32),bytes[])"(_tx: IOptimismPortal.WithdrawalTransactionStruct, _disputeGameIndex: BigNumberish, _outputRootProof: IOptimismPortal.OutputRootProofStruct, _withdrawalProof: BytesLike[], overrides?: CallOverrides): Promise<void>;
        provenWithdrawals(withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<IOptimismPortal.ProvenWithdrawalStructOutput>;
        "provenWithdrawals(bytes32)"(withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<IOptimismPortal.ProvenWithdrawalStructOutput>;
    };
    filters: {};
    estimateGas: {
        _finalizedWithdrawals(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "_finalizedWithdrawals(bytes32)"(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        _provenWithdrawals(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "_provenWithdrawals(bytes32)"(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        finalizeWithdrawalTransaction(_tx: IOptimismPortal.WithdrawalTransactionStruct, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "finalizeWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes))"(_tx: IOptimismPortal.WithdrawalTransactionStruct, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        finalizedWithdrawals(_withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "finalizedWithdrawals(bytes32)"(_withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        proveWithdrawalTransaction(_tx: IOptimismPortal.WithdrawalTransactionStruct, _disputeGameIndex: BigNumberish, _outputRootProof: IOptimismPortal.OutputRootProofStruct, _withdrawalProof: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "proveWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes),uint256,(bytes32,bytes32,bytes32,bytes32),bytes[])"(_tx: IOptimismPortal.WithdrawalTransactionStruct, _disputeGameIndex: BigNumberish, _outputRootProof: IOptimismPortal.OutputRootProofStruct, _withdrawalProof: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        provenWithdrawals(withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "provenWithdrawals(bytes32)"(withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        _finalizedWithdrawals(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "_finalizedWithdrawals(bytes32)"(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        _provenWithdrawals(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "_provenWithdrawals(bytes32)"(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        finalizeWithdrawalTransaction(_tx: IOptimismPortal.WithdrawalTransactionStruct, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "finalizeWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes))"(_tx: IOptimismPortal.WithdrawalTransactionStruct, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        finalizedWithdrawals(_withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "finalizedWithdrawals(bytes32)"(_withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        proveWithdrawalTransaction(_tx: IOptimismPortal.WithdrawalTransactionStruct, _disputeGameIndex: BigNumberish, _outputRootProof: IOptimismPortal.OutputRootProofStruct, _withdrawalProof: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "proveWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes),uint256,(bytes32,bytes32,bytes32,bytes32),bytes[])"(_tx: IOptimismPortal.WithdrawalTransactionStruct, _disputeGameIndex: BigNumberish, _outputRootProof: IOptimismPortal.OutputRootProofStruct, _withdrawalProof: BytesLike[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        provenWithdrawals(withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "provenWithdrawals(bytes32)"(withdrawalHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=MockOptimismPortal.d.ts.map