import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../common.js";
export interface MockOptimismStandardBridgeInterface extends utils.Interface {
    functions: {
        "MESSENGER()": FunctionFragment;
        "OTHER_BRIDGE()": FunctionFragment;
        "__constructor__()": FunctionFragment;
        "bridgeERC20(address,address,uint256,uint32,bytes)": FunctionFragment;
        "bridgeERC20To(address,address,address,uint256,uint32,bytes)": FunctionFragment;
        "bridgeETH(uint32,bytes)": FunctionFragment;
        "bridgeETHTo(address,uint32,bytes)": FunctionFragment;
        "deposits(address,address)": FunctionFragment;
        "finalizeBridgeERC20(address,address,address,address,uint256,bytes)": FunctionFragment;
        "finalizeBridgeETH(address,address,uint256,bytes)": FunctionFragment;
        "messenger()": FunctionFragment;
        "otherBridge()": FunctionFragment;
        "paused()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "MESSENGER" | "MESSENGER()" | "OTHER_BRIDGE" | "OTHER_BRIDGE()" | "__constructor__" | "__constructor__()" | "bridgeERC20" | "bridgeERC20(address,address,uint256,uint32,bytes)" | "bridgeERC20To" | "bridgeERC20To(address,address,address,uint256,uint32,bytes)" | "bridgeETH" | "bridgeETH(uint32,bytes)" | "bridgeETHTo" | "bridgeETHTo(address,uint32,bytes)" | "deposits" | "deposits(address,address)" | "finalizeBridgeERC20" | "finalizeBridgeERC20(address,address,address,address,uint256,bytes)" | "finalizeBridgeETH" | "finalizeBridgeETH(address,address,uint256,bytes)" | "messenger" | "messenger()" | "otherBridge" | "otherBridge()" | "paused" | "paused()"): FunctionFragment;
    encodeFunctionData(functionFragment: "MESSENGER", values?: undefined): string;
    encodeFunctionData(functionFragment: "MESSENGER()", values?: undefined): string;
    encodeFunctionData(functionFragment: "OTHER_BRIDGE", values?: undefined): string;
    encodeFunctionData(functionFragment: "OTHER_BRIDGE()", values?: undefined): string;
    encodeFunctionData(functionFragment: "__constructor__", values?: undefined): string;
    encodeFunctionData(functionFragment: "__constructor__()", values?: undefined): string;
    encodeFunctionData(functionFragment: "bridgeERC20", values: [string, string, BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "bridgeERC20(address,address,uint256,uint32,bytes)", values: [string, string, BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "bridgeERC20To", values: [string, string, string, BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "bridgeERC20To(address,address,address,uint256,uint32,bytes)", values: [string, string, string, BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "bridgeETH", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "bridgeETH(uint32,bytes)", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "bridgeETHTo", values: [string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "bridgeETHTo(address,uint32,bytes)", values: [string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "deposits", values: [string, string]): string;
    encodeFunctionData(functionFragment: "deposits(address,address)", values: [string, string]): string;
    encodeFunctionData(functionFragment: "finalizeBridgeERC20", values: [string, string, string, string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "finalizeBridgeERC20(address,address,address,address,uint256,bytes)", values: [string, string, string, string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "finalizeBridgeETH", values: [string, string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "finalizeBridgeETH(address,address,uint256,bytes)", values: [string, string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "messenger", values?: undefined): string;
    encodeFunctionData(functionFragment: "messenger()", values?: undefined): string;
    encodeFunctionData(functionFragment: "otherBridge", values?: undefined): string;
    encodeFunctionData(functionFragment: "otherBridge()", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused()", values?: undefined): string;
    decodeFunctionResult(functionFragment: "MESSENGER", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MESSENGER()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "OTHER_BRIDGE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "OTHER_BRIDGE()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "__constructor__", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "__constructor__()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bridgeERC20", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bridgeERC20(address,address,uint256,uint32,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bridgeERC20To", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bridgeERC20To(address,address,address,uint256,uint32,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bridgeETH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bridgeETH(uint32,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bridgeETHTo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bridgeETHTo(address,uint32,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposits(address,address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeBridgeERC20", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeBridgeERC20(address,address,address,address,uint256,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeBridgeETH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "finalizeBridgeETH(address,address,uint256,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messenger", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messenger()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "otherBridge", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "otherBridge()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused()", data: BytesLike): Result;
    events: {
        "ERC20BridgeFinalized(address,address,address,address,uint256,bytes)": EventFragment;
        "ERC20BridgeInitiated(address,address,address,address,uint256,bytes)": EventFragment;
        "ETHBridgeFinalized(address,address,uint256,bytes)": EventFragment;
        "ETHBridgeInitiated(address,address,uint256,bytes)": EventFragment;
        "Initialized(uint8)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ERC20BridgeFinalized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ERC20BridgeFinalized(address,address,address,address,uint256,bytes)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ERC20BridgeInitiated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ERC20BridgeInitiated(address,address,address,address,uint256,bytes)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ETHBridgeFinalized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ETHBridgeFinalized(address,address,uint256,bytes)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ETHBridgeInitiated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ETHBridgeInitiated(address,address,uint256,bytes)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized(uint8)"): EventFragment;
}
export interface ERC20BridgeFinalizedEventObject {
    localToken: string;
    remoteToken: string;
    from: string;
    to: string;
    amount: BigNumber;
    extraData: string;
}
export type ERC20BridgeFinalizedEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    BigNumber,
    string
], ERC20BridgeFinalizedEventObject>;
export type ERC20BridgeFinalizedEventFilter = TypedEventFilter<ERC20BridgeFinalizedEvent>;
export interface ERC20BridgeInitiatedEventObject {
    localToken: string;
    remoteToken: string;
    from: string;
    to: string;
    amount: BigNumber;
    extraData: string;
}
export type ERC20BridgeInitiatedEvent = TypedEvent<[
    string,
    string,
    string,
    string,
    BigNumber,
    string
], ERC20BridgeInitiatedEventObject>;
export type ERC20BridgeInitiatedEventFilter = TypedEventFilter<ERC20BridgeInitiatedEvent>;
export interface ETHBridgeFinalizedEventObject {
    from: string;
    to: string;
    amount: BigNumber;
    extraData: string;
}
export type ETHBridgeFinalizedEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    string
], ETHBridgeFinalizedEventObject>;
export type ETHBridgeFinalizedEventFilter = TypedEventFilter<ETHBridgeFinalizedEvent>;
export interface ETHBridgeInitiatedEventObject {
    from: string;
    to: string;
    amount: BigNumber;
    extraData: string;
}
export type ETHBridgeInitiatedEvent = TypedEvent<[
    string,
    string,
    BigNumber,
    string
], ETHBridgeInitiatedEventObject>;
export type ETHBridgeInitiatedEventFilter = TypedEventFilter<ETHBridgeInitiatedEvent>;
export interface InitializedEventObject {
    version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;
export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;
export interface MockOptimismStandardBridge extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MockOptimismStandardBridgeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        MESSENGER(overrides?: CallOverrides): Promise<[string]>;
        "MESSENGER()"(overrides?: CallOverrides): Promise<[string]>;
        OTHER_BRIDGE(overrides?: CallOverrides): Promise<[string]>;
        "OTHER_BRIDGE()"(overrides?: CallOverrides): Promise<[string]>;
        __constructor__(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "__constructor__()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        bridgeERC20(_localToken: string, _remoteToken: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "bridgeERC20(address,address,uint256,uint32,bytes)"(_localToken: string, _remoteToken: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        bridgeERC20To(_localToken: string, _remoteToken: string, _to: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "bridgeERC20To(address,address,address,uint256,uint32,bytes)"(_localToken: string, _remoteToken: string, _to: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        bridgeETH(_minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "bridgeETH(uint32,bytes)"(_minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        bridgeETHTo(_to: string, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "bridgeETHTo(address,uint32,bytes)"(_to: string, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        deposits(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        "deposits(address,address)"(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;
        finalizeBridgeERC20(_localToken: string, _remoteToken: string, _from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "finalizeBridgeERC20(address,address,address,address,uint256,bytes)"(_localToken: string, _remoteToken: string, _from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        finalizeBridgeETH(_from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "finalizeBridgeETH(address,address,uint256,bytes)"(_from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        messenger(overrides?: CallOverrides): Promise<[string]>;
        "messenger()"(overrides?: CallOverrides): Promise<[string]>;
        otherBridge(overrides?: CallOverrides): Promise<[string]>;
        "otherBridge()"(overrides?: CallOverrides): Promise<[string]>;
        paused(overrides?: CallOverrides): Promise<[boolean]>;
        "paused()"(overrides?: CallOverrides): Promise<[boolean]>;
    };
    MESSENGER(overrides?: CallOverrides): Promise<string>;
    "MESSENGER()"(overrides?: CallOverrides): Promise<string>;
    OTHER_BRIDGE(overrides?: CallOverrides): Promise<string>;
    "OTHER_BRIDGE()"(overrides?: CallOverrides): Promise<string>;
    __constructor__(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "__constructor__()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    bridgeERC20(_localToken: string, _remoteToken: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "bridgeERC20(address,address,uint256,uint32,bytes)"(_localToken: string, _remoteToken: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    bridgeERC20To(_localToken: string, _remoteToken: string, _to: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "bridgeERC20To(address,address,address,uint256,uint32,bytes)"(_localToken: string, _remoteToken: string, _to: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    bridgeETH(_minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "bridgeETH(uint32,bytes)"(_minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    bridgeETHTo(_to: string, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "bridgeETHTo(address,uint32,bytes)"(_to: string, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    deposits(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
    "deposits(address,address)"(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
    finalizeBridgeERC20(_localToken: string, _remoteToken: string, _from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "finalizeBridgeERC20(address,address,address,address,uint256,bytes)"(_localToken: string, _remoteToken: string, _from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    finalizeBridgeETH(_from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "finalizeBridgeETH(address,address,uint256,bytes)"(_from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    messenger(overrides?: CallOverrides): Promise<string>;
    "messenger()"(overrides?: CallOverrides): Promise<string>;
    otherBridge(overrides?: CallOverrides): Promise<string>;
    "otherBridge()"(overrides?: CallOverrides): Promise<string>;
    paused(overrides?: CallOverrides): Promise<boolean>;
    "paused()"(overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        MESSENGER(overrides?: CallOverrides): Promise<string>;
        "MESSENGER()"(overrides?: CallOverrides): Promise<string>;
        OTHER_BRIDGE(overrides?: CallOverrides): Promise<string>;
        "OTHER_BRIDGE()"(overrides?: CallOverrides): Promise<string>;
        __constructor__(overrides?: CallOverrides): Promise<void>;
        "__constructor__()"(overrides?: CallOverrides): Promise<void>;
        bridgeERC20(_localToken: string, _remoteToken: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: CallOverrides): Promise<void>;
        "bridgeERC20(address,address,uint256,uint32,bytes)"(_localToken: string, _remoteToken: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: CallOverrides): Promise<void>;
        bridgeERC20To(_localToken: string, _remoteToken: string, _to: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: CallOverrides): Promise<void>;
        "bridgeERC20To(address,address,address,uint256,uint32,bytes)"(_localToken: string, _remoteToken: string, _to: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: CallOverrides): Promise<void>;
        bridgeETH(_minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: CallOverrides): Promise<void>;
        "bridgeETH(uint32,bytes)"(_minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: CallOverrides): Promise<void>;
        bridgeETHTo(_to: string, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: CallOverrides): Promise<void>;
        "bridgeETHTo(address,uint32,bytes)"(_to: string, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: CallOverrides): Promise<void>;
        deposits(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
        "deposits(address,address)"(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
        finalizeBridgeERC20(_localToken: string, _remoteToken: string, _from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: CallOverrides): Promise<void>;
        "finalizeBridgeERC20(address,address,address,address,uint256,bytes)"(_localToken: string, _remoteToken: string, _from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: CallOverrides): Promise<void>;
        finalizeBridgeETH(_from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: CallOverrides): Promise<void>;
        "finalizeBridgeETH(address,address,uint256,bytes)"(_from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: CallOverrides): Promise<void>;
        messenger(overrides?: CallOverrides): Promise<string>;
        "messenger()"(overrides?: CallOverrides): Promise<string>;
        otherBridge(overrides?: CallOverrides): Promise<string>;
        "otherBridge()"(overrides?: CallOverrides): Promise<string>;
        paused(overrides?: CallOverrides): Promise<boolean>;
        "paused()"(overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "ERC20BridgeFinalized(address,address,address,address,uint256,bytes)"(localToken?: string | null, remoteToken?: string | null, from?: string | null, to?: null, amount?: null, extraData?: null): ERC20BridgeFinalizedEventFilter;
        ERC20BridgeFinalized(localToken?: string | null, remoteToken?: string | null, from?: string | null, to?: null, amount?: null, extraData?: null): ERC20BridgeFinalizedEventFilter;
        "ERC20BridgeInitiated(address,address,address,address,uint256,bytes)"(localToken?: string | null, remoteToken?: string | null, from?: string | null, to?: null, amount?: null, extraData?: null): ERC20BridgeInitiatedEventFilter;
        ERC20BridgeInitiated(localToken?: string | null, remoteToken?: string | null, from?: string | null, to?: null, amount?: null, extraData?: null): ERC20BridgeInitiatedEventFilter;
        "ETHBridgeFinalized(address,address,uint256,bytes)"(from?: string | null, to?: string | null, amount?: null, extraData?: null): ETHBridgeFinalizedEventFilter;
        ETHBridgeFinalized(from?: string | null, to?: string | null, amount?: null, extraData?: null): ETHBridgeFinalizedEventFilter;
        "ETHBridgeInitiated(address,address,uint256,bytes)"(from?: string | null, to?: string | null, amount?: null, extraData?: null): ETHBridgeInitiatedEventFilter;
        ETHBridgeInitiated(from?: string | null, to?: string | null, amount?: null, extraData?: null): ETHBridgeInitiatedEventFilter;
        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;
    };
    estimateGas: {
        MESSENGER(overrides?: CallOverrides): Promise<BigNumber>;
        "MESSENGER()"(overrides?: CallOverrides): Promise<BigNumber>;
        OTHER_BRIDGE(overrides?: CallOverrides): Promise<BigNumber>;
        "OTHER_BRIDGE()"(overrides?: CallOverrides): Promise<BigNumber>;
        __constructor__(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "__constructor__()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        bridgeERC20(_localToken: string, _remoteToken: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "bridgeERC20(address,address,uint256,uint32,bytes)"(_localToken: string, _remoteToken: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        bridgeERC20To(_localToken: string, _remoteToken: string, _to: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "bridgeERC20To(address,address,address,uint256,uint32,bytes)"(_localToken: string, _remoteToken: string, _to: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        bridgeETH(_minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        "bridgeETH(uint32,bytes)"(_minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        bridgeETHTo(_to: string, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        "bridgeETHTo(address,uint32,bytes)"(_to: string, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        deposits(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
        "deposits(address,address)"(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
        finalizeBridgeERC20(_localToken: string, _remoteToken: string, _from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "finalizeBridgeERC20(address,address,address,address,uint256,bytes)"(_localToken: string, _remoteToken: string, _from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        finalizeBridgeETH(_from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        "finalizeBridgeETH(address,address,uint256,bytes)"(_from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<BigNumber>;
        messenger(overrides?: CallOverrides): Promise<BigNumber>;
        "messenger()"(overrides?: CallOverrides): Promise<BigNumber>;
        otherBridge(overrides?: CallOverrides): Promise<BigNumber>;
        "otherBridge()"(overrides?: CallOverrides): Promise<BigNumber>;
        paused(overrides?: CallOverrides): Promise<BigNumber>;
        "paused()"(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        MESSENGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "MESSENGER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        OTHER_BRIDGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "OTHER_BRIDGE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        __constructor__(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "__constructor__()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        bridgeERC20(_localToken: string, _remoteToken: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "bridgeERC20(address,address,uint256,uint32,bytes)"(_localToken: string, _remoteToken: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        bridgeERC20To(_localToken: string, _remoteToken: string, _to: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "bridgeERC20To(address,address,address,uint256,uint32,bytes)"(_localToken: string, _remoteToken: string, _to: string, _amount: BigNumberish, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        bridgeETH(_minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "bridgeETH(uint32,bytes)"(_minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        bridgeETHTo(_to: string, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "bridgeETHTo(address,uint32,bytes)"(_to: string, _minGasLimit: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        deposits(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "deposits(address,address)"(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        finalizeBridgeERC20(_localToken: string, _remoteToken: string, _from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "finalizeBridgeERC20(address,address,address,address,uint256,bytes)"(_localToken: string, _remoteToken: string, _from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        finalizeBridgeETH(_from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "finalizeBridgeETH(address,address,uint256,bytes)"(_from: string, _to: string, _amount: BigNumberish, _extraData: BytesLike, overrides?: PayableOverrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        messenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "messenger()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        otherBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "otherBridge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=MockOptimismStandardBridge.d.ts.map