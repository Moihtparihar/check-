import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../../common.js";
export interface OPL2ToL1CcipReadIsmInterface extends utils.Interface {
    functions: {
        "PACKAGE_VERSION()": FunctionFragment;
        "getOffchainVerifyInfo(bytes)": FunctionFragment;
        "moduleType()": FunctionFragment;
        "opPortal()": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "setUrls(string[])": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "urls()": FunctionFragment;
        "verify(bytes,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "PACKAGE_VERSION" | "PACKAGE_VERSION()" | "getOffchainVerifyInfo" | "getOffchainVerifyInfo(bytes)" | "moduleType" | "moduleType()" | "opPortal" | "opPortal()" | "owner" | "owner()" | "renounceOwnership" | "renounceOwnership()" | "setUrls" | "setUrls(string[])" | "transferOwnership" | "transferOwnership(address)" | "urls" | "urls()" | "verify" | "verify(bytes,bytes)"): FunctionFragment;
    encodeFunctionData(functionFragment: "PACKAGE_VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "PACKAGE_VERSION()", values?: undefined): string;
    encodeFunctionData(functionFragment: "getOffchainVerifyInfo", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getOffchainVerifyInfo(bytes)", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "moduleType", values?: undefined): string;
    encodeFunctionData(functionFragment: "moduleType()", values?: undefined): string;
    encodeFunctionData(functionFragment: "opPortal", values?: undefined): string;
    encodeFunctionData(functionFragment: "opPortal()", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership()", values?: undefined): string;
    encodeFunctionData(functionFragment: "setUrls", values: [string[]]): string;
    encodeFunctionData(functionFragment: "setUrls(string[])", values: [string[]]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
    encodeFunctionData(functionFragment: "transferOwnership(address)", values: [string]): string;
    encodeFunctionData(functionFragment: "urls", values?: undefined): string;
    encodeFunctionData(functionFragment: "urls()", values?: undefined): string;
    encodeFunctionData(functionFragment: "verify", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "verify(bytes,bytes)", values: [BytesLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "PACKAGE_VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PACKAGE_VERSION()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getOffchainVerifyInfo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getOffchainVerifyInfo(bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "moduleType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "moduleType()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "opPortal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "opPortal()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setUrls", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setUrls(string[])", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "urls", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "urls()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify(bytes,bytes)", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "UrlsChanged(string[])": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Initialized(uint8)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UrlsChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UrlsChanged(string[])"): EventFragment;
}
export interface InitializedEventObject {
    version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;
export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface UrlsChangedEventObject {
    newUrls: string[];
}
export type UrlsChangedEvent = TypedEvent<[string[]], UrlsChangedEventObject>;
export type UrlsChangedEventFilter = TypedEventFilter<UrlsChangedEvent>;
export interface OPL2ToL1CcipReadIsm extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OPL2ToL1CcipReadIsmInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        PACKAGE_VERSION(overrides?: CallOverrides): Promise<[string]>;
        "PACKAGE_VERSION()"(overrides?: CallOverrides): Promise<[string]>;
        getOffchainVerifyInfo(_message: BytesLike, overrides?: CallOverrides): Promise<[void]>;
        "getOffchainVerifyInfo(bytes)"(_message: BytesLike, overrides?: CallOverrides): Promise<[void]>;
        moduleType(overrides?: CallOverrides): Promise<[number]>;
        "moduleType()"(overrides?: CallOverrides): Promise<[number]>;
        opPortal(overrides?: CallOverrides): Promise<[string]>;
        "opPortal()"(overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        "owner()"(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "renounceOwnership()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        setUrls(__urls: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "setUrls(string[])"(__urls: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "transferOwnership(address)"(newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        urls(overrides?: CallOverrides): Promise<[string[]]>;
        "urls()"(overrides?: CallOverrides): Promise<[string[]]>;
        verify(_metadata: BytesLike, _message: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "verify(bytes,bytes)"(_metadata: BytesLike, _message: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
    };
    PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;
    "PACKAGE_VERSION()"(overrides?: CallOverrides): Promise<string>;
    getOffchainVerifyInfo(_message: BytesLike, overrides?: CallOverrides): Promise<void>;
    "getOffchainVerifyInfo(bytes)"(_message: BytesLike, overrides?: CallOverrides): Promise<void>;
    moduleType(overrides?: CallOverrides): Promise<number>;
    "moduleType()"(overrides?: CallOverrides): Promise<number>;
    opPortal(overrides?: CallOverrides): Promise<string>;
    "opPortal()"(overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    "owner()"(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "renounceOwnership()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    setUrls(__urls: string[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "setUrls(string[])"(__urls: string[], overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "transferOwnership(address)"(newOwner: string, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    urls(overrides?: CallOverrides): Promise<string[]>;
    "urls()"(overrides?: CallOverrides): Promise<string[]>;
    verify(_metadata: BytesLike, _message: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "verify(bytes,bytes)"(_metadata: BytesLike, _message: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    callStatic: {
        PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;
        "PACKAGE_VERSION()"(overrides?: CallOverrides): Promise<string>;
        getOffchainVerifyInfo(_message: BytesLike, overrides?: CallOverrides): Promise<void>;
        "getOffchainVerifyInfo(bytes)"(_message: BytesLike, overrides?: CallOverrides): Promise<void>;
        moduleType(overrides?: CallOverrides): Promise<number>;
        "moduleType()"(overrides?: CallOverrides): Promise<number>;
        opPortal(overrides?: CallOverrides): Promise<string>;
        "opPortal()"(overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        "owner()"(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;
        setUrls(__urls: string[], overrides?: CallOverrides): Promise<void>;
        "setUrls(string[])"(__urls: string[], overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
        "transferOwnership(address)"(newOwner: string, overrides?: CallOverrides): Promise<void>;
        urls(overrides?: CallOverrides): Promise<string[]>;
        "urls()"(overrides?: CallOverrides): Promise<string[]>;
        verify(_metadata: BytesLike, _message: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        "verify(bytes,bytes)"(_metadata: BytesLike, _message: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;
        "UrlsChanged(string[])"(newUrls?: null): UrlsChangedEventFilter;
        UrlsChanged(newUrls?: null): UrlsChangedEventFilter;
    };
    estimateGas: {
        PACKAGE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;
        "PACKAGE_VERSION()"(overrides?: CallOverrides): Promise<BigNumber>;
        getOffchainVerifyInfo(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "getOffchainVerifyInfo(bytes)"(_message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        moduleType(overrides?: CallOverrides): Promise<BigNumber>;
        "moduleType()"(overrides?: CallOverrides): Promise<BigNumber>;
        opPortal(overrides?: CallOverrides): Promise<BigNumber>;
        "opPortal()"(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        "owner()"(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "renounceOwnership()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        setUrls(__urls: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "setUrls(string[])"(__urls: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "transferOwnership(address)"(newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        urls(overrides?: CallOverrides): Promise<BigNumber>;
        "urls()"(overrides?: CallOverrides): Promise<BigNumber>;
        verify(_metadata: BytesLike, _message: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "verify(bytes,bytes)"(_metadata: BytesLike, _message: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        PACKAGE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "PACKAGE_VERSION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getOffchainVerifyInfo(_message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "getOffchainVerifyInfo(bytes)"(_message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        moduleType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "moduleType()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        opPortal(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "opPortal()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "renounceOwnership()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        setUrls(__urls: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "setUrls(string[])"(__urls: string[], overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "transferOwnership(address)"(newOwner: string, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        urls(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "urls()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verify(_metadata: BytesLike, _message: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "verify(bytes,bytes)"(_metadata: BytesLike, _message: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=OPL2ToL1CcipReadIsm.d.ts.map