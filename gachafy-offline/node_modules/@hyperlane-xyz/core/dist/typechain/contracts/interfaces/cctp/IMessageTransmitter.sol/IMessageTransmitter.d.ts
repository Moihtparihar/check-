import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../../common.js";
export interface IMessageTransmitterInterface extends utils.Interface {
    functions: {
        "localDomain()": FunctionFragment;
        "receiveMessage(bytes,bytes)": FunctionFragment;
        "replaceMessage(bytes,bytes,bytes,bytes32)": FunctionFragment;
        "sendMessage(uint32,bytes32,bytes)": FunctionFragment;
        "sendMessageWithCaller(uint32,bytes32,bytes32,bytes)": FunctionFragment;
        "usedNonces(bytes32)": FunctionFragment;
        "version()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "localDomain" | "localDomain()" | "receiveMessage" | "receiveMessage(bytes,bytes)" | "replaceMessage" | "replaceMessage(bytes,bytes,bytes,bytes32)" | "sendMessage" | "sendMessage(uint32,bytes32,bytes)" | "sendMessageWithCaller" | "sendMessageWithCaller(uint32,bytes32,bytes32,bytes)" | "usedNonces" | "usedNonces(bytes32)" | "version" | "version()"): FunctionFragment;
    encodeFunctionData(functionFragment: "localDomain", values?: undefined): string;
    encodeFunctionData(functionFragment: "localDomain()", values?: undefined): string;
    encodeFunctionData(functionFragment: "receiveMessage", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "receiveMessage(bytes,bytes)", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "replaceMessage", values: [BytesLike, BytesLike, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "replaceMessage(bytes,bytes,bytes,bytes32)", values: [BytesLike, BytesLike, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "sendMessage", values: [BigNumberish, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "sendMessage(uint32,bytes32,bytes)", values: [BigNumberish, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "sendMessageWithCaller", values: [BigNumberish, BytesLike, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "sendMessageWithCaller(uint32,bytes32,bytes32,bytes)", values: [BigNumberish, BytesLike, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "usedNonces", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "usedNonces(bytes32)", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "version()", values?: undefined): string;
    decodeFunctionResult(functionFragment: "localDomain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "localDomain()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveMessage(bytes,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "replaceMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "replaceMessage(bytes,bytes,bytes,bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendMessage(uint32,bytes32,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendMessageWithCaller", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "sendMessageWithCaller(uint32,bytes32,bytes32,bytes)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "usedNonces", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "usedNonces(bytes32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version()", data: BytesLike): Result;
    events: {
        "MessageSent(bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "MessageSent"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "MessageSent(bytes)"): EventFragment;
}
export interface MessageSentEventObject {
    message: string;
}
export type MessageSentEvent = TypedEvent<[string], MessageSentEventObject>;
export type MessageSentEventFilter = TypedEventFilter<MessageSentEvent>;
export interface IMessageTransmitter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IMessageTransmitterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        localDomain(overrides?: CallOverrides): Promise<[number]>;
        "localDomain()"(overrides?: CallOverrides): Promise<[number]>;
        receiveMessage(message: BytesLike, signature: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "receiveMessage(bytes,bytes)"(message: BytesLike, signature: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        replaceMessage(originalMessage: BytesLike, originalAttestation: BytesLike, newMessageBody: BytesLike, newDestinationCaller: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "replaceMessage(bytes,bytes,bytes,bytes32)"(originalMessage: BytesLike, originalAttestation: BytesLike, newMessageBody: BytesLike, newDestinationCaller: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        sendMessage(destinationDomain: BigNumberish, recipient: BytesLike, messageBody: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "sendMessage(uint32,bytes32,bytes)"(destinationDomain: BigNumberish, recipient: BytesLike, messageBody: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        sendMessageWithCaller(destinationDomain: BigNumberish, recipient: BytesLike, destinationCaller: BytesLike, messageBody: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "sendMessageWithCaller(uint32,bytes32,bytes32,bytes)"(destinationDomain: BigNumberish, recipient: BytesLike, destinationCaller: BytesLike, messageBody: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        usedNonces(sourceAndNonceHash: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;
        "usedNonces(bytes32)"(sourceAndNonceHash: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;
        version(overrides?: CallOverrides): Promise<[number]>;
        "version()"(overrides?: CallOverrides): Promise<[number]>;
    };
    localDomain(overrides?: CallOverrides): Promise<number>;
    "localDomain()"(overrides?: CallOverrides): Promise<number>;
    receiveMessage(message: BytesLike, signature: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "receiveMessage(bytes,bytes)"(message: BytesLike, signature: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    replaceMessage(originalMessage: BytesLike, originalAttestation: BytesLike, newMessageBody: BytesLike, newDestinationCaller: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "replaceMessage(bytes,bytes,bytes,bytes32)"(originalMessage: BytesLike, originalAttestation: BytesLike, newMessageBody: BytesLike, newDestinationCaller: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    sendMessage(destinationDomain: BigNumberish, recipient: BytesLike, messageBody: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "sendMessage(uint32,bytes32,bytes)"(destinationDomain: BigNumberish, recipient: BytesLike, messageBody: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    sendMessageWithCaller(destinationDomain: BigNumberish, recipient: BytesLike, destinationCaller: BytesLike, messageBody: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "sendMessageWithCaller(uint32,bytes32,bytes32,bytes)"(destinationDomain: BigNumberish, recipient: BytesLike, destinationCaller: BytesLike, messageBody: BytesLike, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    usedNonces(sourceAndNonceHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    "usedNonces(bytes32)"(sourceAndNonceHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    version(overrides?: CallOverrides): Promise<number>;
    "version()"(overrides?: CallOverrides): Promise<number>;
    callStatic: {
        localDomain(overrides?: CallOverrides): Promise<number>;
        "localDomain()"(overrides?: CallOverrides): Promise<number>;
        receiveMessage(message: BytesLike, signature: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        "receiveMessage(bytes,bytes)"(message: BytesLike, signature: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        replaceMessage(originalMessage: BytesLike, originalAttestation: BytesLike, newMessageBody: BytesLike, newDestinationCaller: BytesLike, overrides?: CallOverrides): Promise<void>;
        "replaceMessage(bytes,bytes,bytes,bytes32)"(originalMessage: BytesLike, originalAttestation: BytesLike, newMessageBody: BytesLike, newDestinationCaller: BytesLike, overrides?: CallOverrides): Promise<void>;
        sendMessage(destinationDomain: BigNumberish, recipient: BytesLike, messageBody: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "sendMessage(uint32,bytes32,bytes)"(destinationDomain: BigNumberish, recipient: BytesLike, messageBody: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        sendMessageWithCaller(destinationDomain: BigNumberish, recipient: BytesLike, destinationCaller: BytesLike, messageBody: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "sendMessageWithCaller(uint32,bytes32,bytes32,bytes)"(destinationDomain: BigNumberish, recipient: BytesLike, destinationCaller: BytesLike, messageBody: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        usedNonces(sourceAndNonceHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "usedNonces(bytes32)"(sourceAndNonceHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<number>;
        "version()"(overrides?: CallOverrides): Promise<number>;
    };
    filters: {
        "MessageSent(bytes)"(message?: null): MessageSentEventFilter;
        MessageSent(message?: null): MessageSentEventFilter;
    };
    estimateGas: {
        localDomain(overrides?: CallOverrides): Promise<BigNumber>;
        "localDomain()"(overrides?: CallOverrides): Promise<BigNumber>;
        receiveMessage(message: BytesLike, signature: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "receiveMessage(bytes,bytes)"(message: BytesLike, signature: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        replaceMessage(originalMessage: BytesLike, originalAttestation: BytesLike, newMessageBody: BytesLike, newDestinationCaller: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "replaceMessage(bytes,bytes,bytes,bytes32)"(originalMessage: BytesLike, originalAttestation: BytesLike, newMessageBody: BytesLike, newDestinationCaller: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        sendMessage(destinationDomain: BigNumberish, recipient: BytesLike, messageBody: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "sendMessage(uint32,bytes32,bytes)"(destinationDomain: BigNumberish, recipient: BytesLike, messageBody: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        sendMessageWithCaller(destinationDomain: BigNumberish, recipient: BytesLike, destinationCaller: BytesLike, messageBody: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "sendMessageWithCaller(uint32,bytes32,bytes32,bytes)"(destinationDomain: BigNumberish, recipient: BytesLike, destinationCaller: BytesLike, messageBody: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        usedNonces(sourceAndNonceHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "usedNonces(bytes32)"(sourceAndNonceHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        version(overrides?: CallOverrides): Promise<BigNumber>;
        "version()"(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "localDomain()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        receiveMessage(message: BytesLike, signature: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "receiveMessage(bytes,bytes)"(message: BytesLike, signature: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        replaceMessage(originalMessage: BytesLike, originalAttestation: BytesLike, newMessageBody: BytesLike, newDestinationCaller: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "replaceMessage(bytes,bytes,bytes,bytes32)"(originalMessage: BytesLike, originalAttestation: BytesLike, newMessageBody: BytesLike, newDestinationCaller: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        sendMessage(destinationDomain: BigNumberish, recipient: BytesLike, messageBody: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "sendMessage(uint32,bytes32,bytes)"(destinationDomain: BigNumberish, recipient: BytesLike, messageBody: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        sendMessageWithCaller(destinationDomain: BigNumberish, recipient: BytesLike, destinationCaller: BytesLike, messageBody: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "sendMessageWithCaller(uint32,bytes32,bytes32,bytes)"(destinationDomain: BigNumberish, recipient: BytesLike, destinationCaller: BytesLike, messageBody: BytesLike, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        usedNonces(sourceAndNonceHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "usedNonces(bytes32)"(sourceAndNonceHash: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=IMessageTransmitter.d.ts.map