import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../common.js";
export interface ITokenMessengerV2Interface extends utils.Interface {
    functions: {
        "depositForBurn(uint256,uint32,bytes32,address,bytes32,uint256,uint32)": FunctionFragment;
        "messageBodyVersion()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "depositForBurn" | "depositForBurn(uint256,uint32,bytes32,address,bytes32,uint256,uint32)" | "messageBodyVersion" | "messageBodyVersion()"): FunctionFragment;
    encodeFunctionData(functionFragment: "depositForBurn", values: [
        BigNumberish,
        BigNumberish,
        BytesLike,
        string,
        BytesLike,
        BigNumberish,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "depositForBurn(uint256,uint32,bytes32,address,bytes32,uint256,uint32)", values: [
        BigNumberish,
        BigNumberish,
        BytesLike,
        string,
        BytesLike,
        BigNumberish,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "messageBodyVersion", values?: undefined): string;
    encodeFunctionData(functionFragment: "messageBodyVersion()", values?: undefined): string;
    decodeFunctionResult(functionFragment: "depositForBurn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositForBurn(uint256,uint32,bytes32,address,bytes32,uint256,uint32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageBodyVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageBodyVersion()", data: BytesLike): Result;
    events: {
        "DepositForBurn(address,uint256,address,bytes32,uint32,bytes32,bytes32,uint256,uint32,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DepositForBurn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DepositForBurn(address,uint256,address,bytes32,uint32,bytes32,bytes32,uint256,uint32,bytes)"): EventFragment;
}
export interface DepositForBurnEventObject {
    burnToken: string;
    amount: BigNumber;
    depositor: string;
    mintRecipient: string;
    destinationDomain: number;
    destinationTokenMessenger: string;
    destinationCaller: string;
    maxFee: BigNumber;
    minFinalityThreshold: number;
    hookData: string;
}
export type DepositForBurnEvent = TypedEvent<[
    string,
    BigNumber,
    string,
    string,
    number,
    string,
    string,
    BigNumber,
    number,
    string
], DepositForBurnEventObject>;
export type DepositForBurnEventFilter = TypedEventFilter<DepositForBurnEvent>;
export interface ITokenMessengerV2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ITokenMessengerV2Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        depositForBurn(amount: BigNumberish, destinationDomain: BigNumberish, mintRecipient: BytesLike, burnToken: string, destinationCaller: BytesLike, maxFee: BigNumberish, minFinalityThreshold: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "depositForBurn(uint256,uint32,bytes32,address,bytes32,uint256,uint32)"(amount: BigNumberish, destinationDomain: BigNumberish, mintRecipient: BytesLike, burnToken: string, destinationCaller: BytesLike, maxFee: BigNumberish, minFinalityThreshold: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        messageBodyVersion(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "messageBodyVersion()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
    };
    depositForBurn(amount: BigNumberish, destinationDomain: BigNumberish, mintRecipient: BytesLike, burnToken: string, destinationCaller: BytesLike, maxFee: BigNumberish, minFinalityThreshold: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "depositForBurn(uint256,uint32,bytes32,address,bytes32,uint256,uint32)"(amount: BigNumberish, destinationDomain: BigNumberish, mintRecipient: BytesLike, burnToken: string, destinationCaller: BytesLike, maxFee: BigNumberish, minFinalityThreshold: BigNumberish, overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    messageBodyVersion(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "messageBodyVersion()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    callStatic: {
        depositForBurn(amount: BigNumberish, destinationDomain: BigNumberish, mintRecipient: BytesLike, burnToken: string, destinationCaller: BytesLike, maxFee: BigNumberish, minFinalityThreshold: BigNumberish, overrides?: CallOverrides): Promise<void>;
        "depositForBurn(uint256,uint32,bytes32,address,bytes32,uint256,uint32)"(amount: BigNumberish, destinationDomain: BigNumberish, mintRecipient: BytesLike, burnToken: string, destinationCaller: BytesLike, maxFee: BigNumberish, minFinalityThreshold: BigNumberish, overrides?: CallOverrides): Promise<void>;
        messageBodyVersion(overrides?: CallOverrides): Promise<number>;
        "messageBodyVersion()"(overrides?: CallOverrides): Promise<number>;
    };
    filters: {
        "DepositForBurn(address,uint256,address,bytes32,uint32,bytes32,bytes32,uint256,uint32,bytes)"(burnToken?: string | null, amount?: null, depositor?: string | null, mintRecipient?: null, destinationDomain?: null, destinationTokenMessenger?: null, destinationCaller?: null, maxFee?: null, minFinalityThreshold?: BigNumberish | null, hookData?: null): DepositForBurnEventFilter;
        DepositForBurn(burnToken?: string | null, amount?: null, depositor?: string | null, mintRecipient?: null, destinationDomain?: null, destinationTokenMessenger?: null, destinationCaller?: null, maxFee?: null, minFinalityThreshold?: BigNumberish | null, hookData?: null): DepositForBurnEventFilter;
    };
    estimateGas: {
        depositForBurn(amount: BigNumberish, destinationDomain: BigNumberish, mintRecipient: BytesLike, burnToken: string, destinationCaller: BytesLike, maxFee: BigNumberish, minFinalityThreshold: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "depositForBurn(uint256,uint32,bytes32,address,bytes32,uint256,uint32)"(amount: BigNumberish, destinationDomain: BigNumberish, mintRecipient: BytesLike, burnToken: string, destinationCaller: BytesLike, maxFee: BigNumberish, minFinalityThreshold: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        messageBodyVersion(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "messageBodyVersion()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        depositForBurn(amount: BigNumberish, destinationDomain: BigNumberish, mintRecipient: BytesLike, burnToken: string, destinationCaller: BytesLike, maxFee: BigNumberish, minFinalityThreshold: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "depositForBurn(uint256,uint32,bytes32,address,bytes32,uint256,uint32)"(amount: BigNumberish, destinationDomain: BigNumberish, mintRecipient: BytesLike, burnToken: string, destinationCaller: BytesLike, maxFee: BigNumberish, minFinalityThreshold: BigNumberish, overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        messageBodyVersion(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "messageBodyVersion()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=ITokenMessengerV2.d.ts.map