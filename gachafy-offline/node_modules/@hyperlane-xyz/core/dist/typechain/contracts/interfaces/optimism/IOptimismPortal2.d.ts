import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../../common.js";
export declare namespace IOptimismPortal2 {
    type ProvenWithdrawalStruct = {
        disputeGameProxy: string;
        timestamp: BigNumberish;
    };
    type ProvenWithdrawalStructOutput = [string, BigNumber] & {
        disputeGameProxy: string;
        timestamp: BigNumber;
    };
}
export interface IOptimismPortal2Interface extends utils.Interface {
    functions: {
        "provenWithdrawals(bytes32,address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "provenWithdrawals" | "provenWithdrawals(bytes32,address)"): FunctionFragment;
    encodeFunctionData(functionFragment: "provenWithdrawals", values: [BytesLike, string]): string;
    encodeFunctionData(functionFragment: "provenWithdrawals(bytes32,address)", values: [BytesLike, string]): string;
    decodeFunctionResult(functionFragment: "provenWithdrawals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "provenWithdrawals(bytes32,address)", data: BytesLike): Result;
    events: {};
}
export interface IOptimismPortal2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IOptimismPortal2Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        provenWithdrawals(withdrawalHash: BytesLike, msgSender: string, overrides?: CallOverrides): Promise<[IOptimismPortal2.ProvenWithdrawalStructOutput]>;
        "provenWithdrawals(bytes32,address)"(withdrawalHash: BytesLike, msgSender: string, overrides?: CallOverrides): Promise<[IOptimismPortal2.ProvenWithdrawalStructOutput]>;
    };
    provenWithdrawals(withdrawalHash: BytesLike, msgSender: string, overrides?: CallOverrides): Promise<IOptimismPortal2.ProvenWithdrawalStructOutput>;
    "provenWithdrawals(bytes32,address)"(withdrawalHash: BytesLike, msgSender: string, overrides?: CallOverrides): Promise<IOptimismPortal2.ProvenWithdrawalStructOutput>;
    callStatic: {
        provenWithdrawals(withdrawalHash: BytesLike, msgSender: string, overrides?: CallOverrides): Promise<IOptimismPortal2.ProvenWithdrawalStructOutput>;
        "provenWithdrawals(bytes32,address)"(withdrawalHash: BytesLike, msgSender: string, overrides?: CallOverrides): Promise<IOptimismPortal2.ProvenWithdrawalStructOutput>;
    };
    filters: {};
    estimateGas: {
        provenWithdrawals(withdrawalHash: BytesLike, msgSender: string, overrides?: CallOverrides): Promise<BigNumber>;
        "provenWithdrawals(bytes32,address)"(withdrawalHash: BytesLike, msgSender: string, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        provenWithdrawals(withdrawalHash: BytesLike, msgSender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "provenWithdrawals(bytes32,address)"(withdrawalHash: BytesLike, msgSender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=IOptimismPortal2.d.ts.map