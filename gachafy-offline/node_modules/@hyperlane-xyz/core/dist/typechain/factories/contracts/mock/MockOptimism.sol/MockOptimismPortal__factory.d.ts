import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockOptimismPortal, MockOptimismPortalInterface } from "../../../../contracts/mock/MockOptimism.sol/MockOptimismPortal.js";
type MockOptimismPortalConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockOptimismPortal__factory extends ContractFactory {
    constructor(...args: MockOptimismPortalConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<MockOptimismPortal>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): MockOptimismPortal;
    connect(signer: Signer): MockOptimismPortal__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b506107ef806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063cc8c790611610050578063cc8c7906146100d7578063e965084c146100fa578063eb4ed4da146101b257600080fd5b80634870496f146100775780638c3152e91461008c578063a14238e71461009f575b600080fd5b61008a6100853660046105e4565b610231565b005b61008a61009a3660046106b8565b6102ac565b6100c26100ad3660046106f5565b60009081526001602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100c26100e53660046106f5565b60016020526000908152604090205460ff1681565b6101766101083660046106f5565b604080516060808201835260008083526020808401829052928401819052938452838252928290208251938401835280548452600101546fffffffffffffffffffffffffffffffff808216928501929092527001000000000000000000000000000000009004169082015290565b60408051825181526020808401516fffffffffffffffffffffffffffffffff9081169183019190915292820151909216908201526060016100ce565b6102036101c03660046106f5565b600060208190529081526040902080546001909101546fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041683565b604080519384526fffffffffffffffffffffffffffffffff92831660208501529116908201526060016100ce565b600061023c856102f5565b6040805160608101825260209586015181526fffffffffffffffffffffffffffffffff428116878301908152600083850181815295815297889052929096209051815590519151851670010000000000000000000000000000000002919094161760019093019290925550505050565b60006102b7826102f5565b600090815260016020819052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690911790555050565b80516020808301516040808501516060860151608087015160a0880151935160009761032597909695910161070e565b604051602081830303815290604052805190602001209050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561039457610394610342565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156103e1576103e1610342565b604052919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461040d57600080fd5b919050565b600082601f83011261042357600080fd5b813567ffffffffffffffff81111561043d5761043d610342565b61046e60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160161039a565b81815284602083860101111561048357600080fd5b816020850160208301376000918101602001919091529392505050565b600060c082840312156104b257600080fd5b60405160c0810167ffffffffffffffff82821081831117156104d6576104d6610342565b81604052829350843583526104ed602086016103e9565b60208401526104fe604086016103e9565b6040840152606085013560608401526080850135608084015260a085013591508082111561052b57600080fd5b5061053885828601610412565b60a0830152505092915050565b600082601f83011261055657600080fd5b8135602067ffffffffffffffff8083111561057357610573610342565b8260051b61058283820161039a565b938452858101830193838101908886111561059c57600080fd5b84880192505b858310156105d8578235848111156105ba5760008081fd5b6105c88a87838c0101610412565b83525091840191908401906105a2565b98975050505050505050565b60008060008084860360e08112156105fb57600080fd5b853567ffffffffffffffff8082111561061357600080fd5b61061f89838a016104a0565b96506020880135955060807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08401121561065857600080fd5b610660610371565b925060408801358352606088013560208401526080880135604084015260a0880135606084015282945060c088013592508083111561069e57600080fd5b50506106ac87828801610545565b91505092959194509250565b6000602082840312156106ca57600080fd5b813567ffffffffffffffff8111156106e157600080fd5b6106ed848285016104a0565b949350505050565b60006020828403121561070757600080fd5b5035919050565b8681526000602073ffffffffffffffffffffffffffffffffffffffff808916602085015280881660408501525085606084015284608084015260c060a084015283518060c085015260005b818110156107755785810183015185820160e001528201610759565b50600060e0828601015260e07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505097965050505050505056fea264697066735822122038027c010f87ca67f1e7da6963113f689ddd1020887495a8ba478c823f294dde64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "WithdrawalTransactionFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "_finalizedWithdrawals";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "_provenWithdrawals";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "outputRoot";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint128";
            readonly name: "timestamp";
            readonly type: "uint128";
        }, {
            readonly internalType: "uint128";
            readonly name: "l2OutputIndex";
            readonly type: "uint128";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nonce";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "gasLimit";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IOptimismPortal.WithdrawalTransaction";
            readonly name: "_tx";
            readonly type: "tuple";
        }];
        readonly name: "finalizeWithdrawalTransaction";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_withdrawalHash";
            readonly type: "bytes32";
        }];
        readonly name: "finalizedWithdrawals";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "value";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nonce";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "gasLimit";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IOptimismPortal.WithdrawalTransaction";
            readonly name: "_tx";
            readonly type: "tuple";
        }, {
            readonly internalType: "uint256";
            readonly name: "_disputeGameIndex";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "version";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "stateRoot";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "messagePasserStorageRoot";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "latestBlockhash";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct IOptimismPortal.OutputRootProof";
            readonly name: "_outputRootProof";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_withdrawalProof";
            readonly type: "bytes[]";
        }];
        readonly name: "proveWithdrawalTransaction";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "withdrawalHash";
            readonly type: "bytes32";
        }];
        readonly name: "provenWithdrawals";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "outputRoot";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint128";
                readonly name: "timestamp";
                readonly type: "uint128";
            }, {
                readonly internalType: "uint128";
                readonly name: "l2OutputIndex";
                readonly type: "uint128";
            }];
            readonly internalType: "struct IOptimismPortal.ProvenWithdrawal";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): MockOptimismPortalInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockOptimismPortal;
}
export {};
//# sourceMappingURL=MockOptimismPortal__factory.d.ts.map