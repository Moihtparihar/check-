import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Indexed, IndexedInterface } from "../../../contracts/libs/Indexed.js";
type IndexedConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class Indexed__factory extends ContractFactory {
    constructor(...args: IndexedConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<Indexed>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): Indexed;
    connect(signer: Signer): Indexed__factory;
    static readonly bytecode = "0x60a0604052348015600f57600080fd5b5043608052608051609b61002c600039600060310152609b6000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806382ea7bfe14602d575b600080fd5b60537f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200160405180910390f3fea26469706673582212205c6f50ef350c3a1c5c032df82b131b93a84ced0ec6796bd95c74bc8f117528a164736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "deployedBlock";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IndexedInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Indexed;
}
export {};
//# sourceMappingURL=Indexed__factory.d.ts.map