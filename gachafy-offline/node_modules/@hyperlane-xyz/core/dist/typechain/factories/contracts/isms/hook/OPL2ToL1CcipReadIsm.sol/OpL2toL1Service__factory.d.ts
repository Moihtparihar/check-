import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { OpL2toL1Service, OpL2toL1ServiceInterface } from "../../../../../contracts/isms/hook/OPL2ToL1CcipReadIsm.sol/OpL2toL1Service.js";
export declare class OpL2toL1Service__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "getFinalizeWithdrawalTx";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nonce";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "gasLimit";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IOptimismPortal.WithdrawalTransaction";
            readonly name: "_tx";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "getWithdrawalProof";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nonce";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "gasLimit";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IOptimismPortal.WithdrawalTransaction";
            readonly name: "_tx";
            readonly type: "tuple";
        }, {
            readonly internalType: "uint256";
            readonly name: "_disputeGameIndex";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "version";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "stateRoot";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "messagePasserStorageRoot";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "latestBlockhash";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct IOptimismPortal.OutputRootProof";
            readonly name: "_outputRootProof";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_withdrawalProof";
            readonly type: "bytes[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): OpL2toL1ServiceInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): OpL2toL1Service;
}
//# sourceMappingURL=OpL2toL1Service__factory.d.ts.map