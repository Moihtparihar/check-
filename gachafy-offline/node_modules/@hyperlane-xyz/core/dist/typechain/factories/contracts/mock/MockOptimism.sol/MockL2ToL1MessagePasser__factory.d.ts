import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockL2ToL1MessagePasser, MockL2ToL1MessagePasserInterface } from "../../../../contracts/mock/MockOptimism.sol/MockL2ToL1MessagePasser.js";
type MockL2ToL1MessagePasserConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockL2ToL1MessagePasser__factory extends ContractFactory {
    constructor(...args: MockL2ToL1MessagePasserConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<MockL2ToL1MessagePasser>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): MockL2ToL1MessagePasser;
    connect(signer: Signer): MockL2ToL1MessagePasser__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b50609a8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80633f827a5a146037578063ecc70428146056575b600080fd5b603e600181565b60405161ffff90911681526020015b60405180910390f35b60405160008152602001604d56fea2646970667358221220d3652929264bef9da17251bae999b5eb09d639d256d5f9371e9d4fe21764f49964736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "MESSAGE_VERSION";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): MockL2ToL1MessagePasserInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockL2ToL1MessagePasser;
}
export {};
//# sourceMappingURL=MockL2ToL1MessagePasser__factory.d.ts.map