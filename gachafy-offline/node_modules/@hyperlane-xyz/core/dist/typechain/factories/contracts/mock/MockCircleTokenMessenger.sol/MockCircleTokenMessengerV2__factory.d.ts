import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockCircleTokenMessengerV2, MockCircleTokenMessengerV2Interface } from "../../../../contracts/mock/MockCircleTokenMessenger.sol/MockCircleTokenMessengerV2.js";
type MockCircleTokenMessengerV2ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockCircleTokenMessengerV2__factory extends ContractFactory {
    constructor(...args: MockCircleTokenMessengerV2ConstructorParams);
    deploy(_token: string, overrides?: Overrides & {
        from?: string;
    }): Promise<MockCircleTokenMessengerV2>;
    getDeployTransaction(_token: string, overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): MockCircleTokenMessengerV2;
    connect(signer: Signer): MockCircleTokenMessengerV2__factory;
    static readonly bytecode = "0x6080604052600080546001600160401b031916905534801561002057600080fd5b5060405161047e38038061047e83398101604081905261003f91610073565b600080546001600160a01b039092166801000000000000000002600160401b600160e01b03199092169190911790556100a3565b60006020828403121561008557600080fd5b81516001600160a01b038116811461009c57600080fd5b9392505050565b6103cc806100b26000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80638e0250ee146100465780639cdbb1811461005b578063d69c3d301461006f575b600080fd5b610059610054366004610299565b61009c565b005b604051600181526020015b60405180910390f35b6000546100839067ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610066565b600080546001919081906100bb90849067ffffffffffffffff1661031e565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff16600060089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461013b57600080fd5b6000546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018990526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af11580156101c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e7919061036d565b506000546040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018990526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff16906342966c6890602401600060405180830381600087803b15801561025f57600080fd5b505af1158015610273573d6000803e3d6000fd5b5050505050505050505050565b803563ffffffff8116811461029457600080fd5b919050565b600080600080600080600060e0888a0312156102b457600080fd5b873596506102c460208901610280565b955060408801359450606088013573ffffffffffffffffffffffffffffffffffffffff811681146102f457600080fd5b93506080880135925060a0880135915061031060c08901610280565b905092959891949750929550565b67ffffffffffffffff818116838216019080821115610366577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5092915050565b60006020828403121561037f57600080fd5b8151801515811461038f57600080fd5b939250505056fea26469706673582212206095aa4b0db3397d95bf6d46c4a129940bd68594cb43dd7ba38533ad2f18d13964736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "contract MockToken";
            readonly name: "_token";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "burnToken";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "depositor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "mintRecipient";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "destinationDomain";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "destinationTokenMessenger";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "destinationCaller";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "maxFee";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "uint32";
            readonly name: "minFinalityThreshold";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "hookData";
            readonly type: "bytes";
        }];
        readonly name: "DepositForBurn";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_burnToken";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly name: "depositForBurn";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageBodyVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): MockCircleTokenMessengerV2Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockCircleTokenMessengerV2;
}
export {};
//# sourceMappingURL=MockCircleTokenMessengerV2__factory.d.ts.map