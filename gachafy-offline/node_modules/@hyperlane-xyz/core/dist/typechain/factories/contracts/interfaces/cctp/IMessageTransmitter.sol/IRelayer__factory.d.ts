import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IRelayer, IRelayerInterface } from "../../../../../contracts/interfaces/cctp/IMessageTransmitter.sol/IRelayer.js";
export declare class IRelayer__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "originalMessage";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "originalAttestation";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "newMessageBody";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "newDestinationCaller";
            readonly type: "bytes32";
        }];
        readonly name: "replaceMessage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "destinationDomain";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "recipient";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "messageBody";
            readonly type: "bytes";
        }];
        readonly name: "sendMessage";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "destinationDomain";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "recipient";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "destinationCaller";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "messageBody";
            readonly type: "bytes";
        }];
        readonly name: "sendMessageWithCaller";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IRelayerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IRelayer;
}
//# sourceMappingURL=IRelayer__factory.d.ts.map