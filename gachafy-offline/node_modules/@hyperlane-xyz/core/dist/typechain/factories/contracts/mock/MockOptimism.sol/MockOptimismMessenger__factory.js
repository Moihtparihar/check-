/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { utils, Contract, ContractFactory } from "ethers";
const _abi = [
    {
        inputs: [],
        name: "OTHER_MESSENGER",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "PORTAL",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "_message",
                type: "bytes",
            },
            {
                internalType: "uint32",
                name: "_minGasLimit",
                type: "uint32",
            },
        ],
        name: "baseGas",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [],
        name: "messageNonce",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "",
                type: "address",
            },
            {
                internalType: "address",
                name: "_target",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "_value",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
            {
                internalType: "bytes",
                name: "_message",
                type: "bytes",
            },
        ],
        name: "relayMessage",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_target",
                type: "address",
            },
            {
                internalType: "bytes",
                name: "_message",
                type: "bytes",
            },
            {
                internalType: "uint32",
                name: "_gasLimit",
                type: "uint32",
            },
        ],
        name: "sendMessage",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_portal",
                type: "address",
            },
        ],
        name: "setPORTAL",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "_sender",
                type: "address",
            },
        ],
        name: "setXDomainMessageSender",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "xDomainMessageSender",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b506108ca806100206000396000f3fe6080604052600436106100965760003560e01c8063a8e8a9ed11610069578063bf24eb631161004e578063bf24eb63146101e8578063d764ad0b1461024a578063ecc704281461025d57600080fd5b8063a8e8a9ed14610149578063b28ade25146101ab57600080fd5b80630ff754ea1461009b5780633dbb202b146100f25780636e296e45146101085780639fce812c14610135575b600080fd5b3480156100a757600080fd5b506001546100c89073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61010661010036600461067d565b50505050565b005b34801561011457600080fd5b506000546100c89073ffffffffffffffffffffffffffffffffffffffff1681565b34801561014157600080fd5b5060006100c8565b34801561015557600080fd5b506101066101643660046106e2565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3480156101b757600080fd5b506101cf6101c6366004610704565b60009392505050565b60405167ffffffffffffffff90911681526020016100e9565b3480156101f457600080fd5b506101066102033660046106e2565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610106610258366004610758565b610279565b34801561026957600080fd5b50604051600081526020016100e9565b600060405180606001604052806102a38873ffffffffffffffffffffffffffffffffffffffff1690565b815260200186815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505091525090506102f1816102fc565b505050505050505050565b606061031d61030e8360000151610323565b836040015184602001516103d1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff8211156103cd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5479706543617374733a2062797465733332546f41646472657373206f76657260448201527f666c6f770000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5090565b60606103f784848460405180606001604052806029815260200161086c602991396103ff565b949350505050565b606082471015610491576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016103c4565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516104ba91906107fe565b60006040518083038185875af1925050503d80600081146104f7576040519150601f19603f3d011682016040523d82523d6000602084013e6104fc565b606091505b509150915061050d87838387610518565b979650505050505050565b606083156105ae5782516000036105a75773ffffffffffffffffffffffffffffffffffffffff85163b6105a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103c4565b50816103f7565b6103f783838151156105c35781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c4919061081a565b803573ffffffffffffffffffffffffffffffffffffffff8116811461061b57600080fd5b919050565b60008083601f84011261063257600080fd5b50813567ffffffffffffffff81111561064a57600080fd5b60208301915083602082850101111561066257600080fd5b9250929050565b803563ffffffff8116811461061b57600080fd5b6000806000806060858703121561069357600080fd5b61069c856105f7565b9350602085013567ffffffffffffffff8111156106b857600080fd5b6106c487828801610620565b90945092506106d7905060408601610669565b905092959194509250565b6000602082840312156106f457600080fd5b6106fd826105f7565b9392505050565b60008060006040848603121561071957600080fd5b833567ffffffffffffffff81111561073057600080fd5b61073c86828701610620565b909450925061074f905060208501610669565b90509250925092565b600080600080600080600060c0888a03121561077357600080fd5b87359650610783602089016105f7565b9550610791604089016105f7565b9450606088013593506080880135925060a088013567ffffffffffffffff8111156107bb57600080fd5b6107c78a828b01610620565b989b979a50959850939692959293505050565b60005b838110156107f55781810151838201526020016107dd565b50506000910152565b600082516108108184602087016107da565b9190910192915050565b60208152600082518060208401526108398160408501602087016107da565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a26469706673582212206fd29b16ab7f8baa28510ac803ab632d7e28f9fc25356de1459c5cc955b3a27564736f6c63430008160033";
const isSuperArgs = (xs) => xs.length > 1;
export class MockOptimismMessenger__factory extends ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}
//# sourceMappingURL=MockOptimismMessenger__factory.js.map