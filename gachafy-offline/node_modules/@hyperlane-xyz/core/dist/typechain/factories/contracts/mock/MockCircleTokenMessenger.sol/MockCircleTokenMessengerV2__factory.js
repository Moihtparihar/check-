/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { utils, Contract, ContractFactory } from "ethers";
const _abi = [
    {
        inputs: [
            {
                internalType: "contract MockToken",
                name: "_token",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "burnToken",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
            {
                indexed: true,
                internalType: "address",
                name: "depositor",
                type: "address",
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "mintRecipient",
                type: "bytes32",
            },
            {
                indexed: false,
                internalType: "uint32",
                name: "destinationDomain",
                type: "uint32",
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "destinationTokenMessenger",
                type: "bytes32",
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "destinationCaller",
                type: "bytes32",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "maxFee",
                type: "uint256",
            },
            {
                indexed: true,
                internalType: "uint32",
                name: "minFinalityThreshold",
                type: "uint32",
            },
            {
                indexed: false,
                internalType: "bytes",
                name: "hookData",
                type: "bytes",
            },
        ],
        name: "DepositForBurn",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_amount",
                type: "uint256",
            },
            {
                internalType: "uint32",
                name: "",
                type: "uint32",
            },
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
            {
                internalType: "address",
                name: "_burnToken",
                type: "address",
            },
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
            {
                internalType: "uint32",
                name: "",
                type: "uint32",
            },
        ],
        name: "depositForBurn",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "messageBodyVersion",
        outputs: [
            {
                internalType: "uint32",
                name: "",
                type: "uint32",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "nextNonce",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x6080604052600080546001600160401b031916905534801561002057600080fd5b5060405161047e38038061047e83398101604081905261003f91610073565b600080546001600160a01b039092166801000000000000000002600160401b600160e01b03199092169190911790556100a3565b60006020828403121561008557600080fd5b81516001600160a01b038116811461009c57600080fd5b9392505050565b6103cc806100b26000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80638e0250ee146100465780639cdbb1811461005b578063d69c3d301461006f575b600080fd5b610059610054366004610299565b61009c565b005b604051600181526020015b60405180910390f35b6000546100839067ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610066565b600080546001919081906100bb90849067ffffffffffffffff1661031e565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff16600060089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461013b57600080fd5b6000546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018990526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af11580156101c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e7919061036d565b506000546040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018990526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff16906342966c6890602401600060405180830381600087803b15801561025f57600080fd5b505af1158015610273573d6000803e3d6000fd5b5050505050505050505050565b803563ffffffff8116811461029457600080fd5b919050565b600080600080600080600060e0888a0312156102b457600080fd5b873596506102c460208901610280565b955060408801359450606088013573ffffffffffffffffffffffffffffffffffffffff811681146102f457600080fd5b93506080880135925060a0880135915061031060c08901610280565b905092959891949750929550565b67ffffffffffffffff818116838216019080821115610366577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5092915050565b60006020828403121561037f57600080fd5b8151801515811461038f57600080fd5b939250505056fea26469706673582212206095aa4b0db3397d95bf6d46c4a129940bd68594cb43dd7ba38533ad2f18d13964736f6c63430008160033";
const isSuperArgs = (xs) => xs.length > 1;
export class MockCircleTokenMessengerV2__factory extends ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(_token, overrides) {
        return super.deploy(_token, overrides || {});
    }
    getDeployTransaction(_token, overrides) {
        return super.getDeployTransaction(_token, overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}
//# sourceMappingURL=MockCircleTokenMessengerV2__factory.js.map