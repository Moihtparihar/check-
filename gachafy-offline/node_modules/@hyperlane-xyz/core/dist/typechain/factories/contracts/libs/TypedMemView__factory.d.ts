import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TypedMemView, TypedMemViewInterface } from "../../../contracts/libs/TypedMemView.js";
type TypedMemViewConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class TypedMemView__factory extends ContractFactory {
    constructor(...args: TypedMemViewConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<TypedMemView>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): TypedMemView;
    connect(signer: Signer): TypedMemView__factory;
    static readonly bytecode = "0x60c9610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063f26be3fc146038575b600080fd5b605e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000081565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000909116815260200160405180910390f3fea2646970667358221220b31caa9be555e4bb080e883828ca63274f45833b23f56262394fd50852cb1c8264736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "NULL";
        readonly outputs: readonly [{
            readonly internalType: "bytes29";
            readonly name: "";
            readonly type: "bytes29";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): TypedMemViewInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): TypedMemView;
}
export {};
//# sourceMappingURL=TypedMemView__factory.d.ts.map