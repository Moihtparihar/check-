import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockOptimismStandardBridge, MockOptimismStandardBridgeInterface } from "../../../../contracts/mock/MockOptimism.sol/MockOptimismStandardBridge.js";
type MockOptimismStandardBridgeConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockOptimismStandardBridge__factory extends ContractFactory {
    constructor(...args: MockOptimismStandardBridgeConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<MockOptimismStandardBridge>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): MockOptimismStandardBridge;
    connect(signer: Signer): MockOptimismStandardBridge__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610675806100206000396000f3fe6080604052600436106100d65760003560e01c80635c975abb1161007f5780638f601f66116100595780638f601f6614610206578063927ede2d14610237578063c89701a2146101bd578063e11013dd1461025e57600080fd5b80635c975abb146101a15780637f46ddb2146101bd57806387087623146101e457600080fd5b80631c0082a3116100b05780631c0082a31461012d5780633cb747bf14610139578063540abf731461018657600080fd5b80630166a07a146100e257806309fc8843146101075780631635f5fd1461011957600080fd5b366100dd57005b600080fd5b3480156100ee57600080fd5b506101056100fd366004610374565b505050505050565b005b610105610115366004610410565b5050565b61010561012736600461045e565b50505050565b34801561010557600080fd5b34801561014557600080fd5b507342000000000000000000000000000000000000075b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561019257600080fd5b506101056100fd3660046104c6565b3480156101ad57600080fd5b506040516000815260200161017d565b3480156101c957600080fd5b5073fbb0621e0b23b5478b630bd55a5f21f67730b0f161015c565b3480156101f057600080fd5b506101056101ff366004610535565b5050505050565b34801561021257600080fd5b506102296102213660046105ae565b600092915050565b60405190815260200161017d565b34801561024357600080fd5b5073420000000000000000000000000000000000000761015c565b61010561026c3660046105e1565b505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461029557600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126102da57600080fd5b813567ffffffffffffffff808211156102f5576102f561029a565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561033b5761033b61029a565b8160405283815286602085880101111561035457600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c0878903121561038d57600080fd5b61039687610271565b95506103a460208801610271565b94506103b260408801610271565b93506103c060608801610271565b92506080870135915060a087013567ffffffffffffffff8111156103e357600080fd5b6103ef89828a016102c9565b9150509295509295509295565b803563ffffffff8116811461029557600080fd5b6000806040838503121561042357600080fd5b61042c836103fc565b9150602083013567ffffffffffffffff81111561044857600080fd5b610454858286016102c9565b9150509250929050565b6000806000806080858703121561047457600080fd5b61047d85610271565b935061048b60208601610271565b925060408501359150606085013567ffffffffffffffff8111156104ae57600080fd5b6104ba878288016102c9565b91505092959194509250565b60008060008060008060c087890312156104df57600080fd5b6104e887610271565b95506104f660208801610271565b945061050460408801610271565b935060608701359250610519608088016103fc565b915060a087013567ffffffffffffffff8111156103e357600080fd5b600080600080600060a0868803121561054d57600080fd5b61055686610271565b945061056460208701610271565b935060408601359250610579606087016103fc565b9150608086013567ffffffffffffffff81111561059557600080fd5b6105a1888289016102c9565b9150509295509295909350565b600080604083850312156105c157600080fd5b6105ca83610271565b91506105d860208401610271565b90509250929050565b6000806000606084860312156105f657600080fd5b6105ff84610271565b925061060d602085016103fc565b9150604084013567ffffffffffffffff81111561062957600080fd5b610635868287016102c9565b915050925092509256fea2646970667358221220a6e8a88ffe8fc14ef82fd31607454039b6fb616ef6000d2205dcd60c99fad2ae64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "localToken";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "remoteToken";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "extraData";
            readonly type: "bytes";
        }];
        readonly name: "ERC20BridgeFinalized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "localToken";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "remoteToken";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "extraData";
            readonly type: "bytes";
        }];
        readonly name: "ERC20BridgeInitiated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "extraData";
            readonly type: "bytes";
        }];
        readonly name: "ETHBridgeFinalized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "extraData";
            readonly type: "bytes";
        }];
        readonly name: "ETHBridgeInitiated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "MESSENGER";
        readonly outputs: readonly [{
            readonly internalType: "contract ICrossDomainMessenger";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "OTHER_BRIDGE";
        readonly outputs: readonly [{
            readonly internalType: "contract IStandardBridge";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "__constructor__";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_localToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_remoteToken";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint32";
            readonly name: "_minGasLimit";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "bridgeERC20";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_localToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_remoteToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint32";
            readonly name: "_minGasLimit";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "bridgeERC20To";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_minGasLimit";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "bridgeETH";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint32";
            readonly name: "_minGasLimit";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "bridgeETHTo";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "deposits";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_localToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_remoteToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "finalizeBridgeERC20";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "finalizeBridgeETH";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messenger";
        readonly outputs: readonly [{
            readonly internalType: "contract ICrossDomainMessenger";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "otherBridge";
        readonly outputs: readonly [{
            readonly internalType: "contract IStandardBridge";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): MockOptimismStandardBridgeInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockOptimismStandardBridge;
}
export {};
//# sourceMappingURL=MockOptimismStandardBridge__factory.d.ts.map