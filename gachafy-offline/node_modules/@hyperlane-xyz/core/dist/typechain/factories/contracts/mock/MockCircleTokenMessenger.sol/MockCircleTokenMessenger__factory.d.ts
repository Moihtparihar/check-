import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockCircleTokenMessenger, MockCircleTokenMessengerInterface } from "../../../../contracts/mock/MockCircleTokenMessenger.sol/MockCircleTokenMessenger.js";
type MockCircleTokenMessengerConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockCircleTokenMessenger__factory extends ContractFactory {
    constructor(...args: MockCircleTokenMessengerConstructorParams);
    deploy(_token: string, overrides?: Overrides & {
        from?: string;
    }): Promise<MockCircleTokenMessenger>;
    getDeployTransaction(_token: string, overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): MockCircleTokenMessenger;
    connect(signer: Signer): MockCircleTokenMessenger__factory;
    static readonly bytecode = "0x6080604052600080546001600160401b031916905534801561002057600080fd5b5060405161051638038061051683398101604081905261003f91610073565b600080546001600160a01b039092166801000000000000000002600160401b600160e01b03199092169190911790556100a3565b60006020828403121561008557600080fd5b81516001600160a01b038116811461009c57600080fd5b9392505050565b610464806100b26000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80636fd3504e146100515780639cdbb18114610082578063d69c3d3014610091578063f856ddb6146100a5575b600080fd5b61006461005f366004610322565b6100b8565b60405167ffffffffffffffff90911681526020015b60405180910390f35b60405160008152602001610079565b6000546100649067ffffffffffffffff1681565b6100646100b3366004610368565b610299565b6000805467ffffffffffffffff1690600190806100d583856103b6565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff16600060089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461015557600080fd5b6000546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af11580156101dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102019190610405565b506000546040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018790526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff16906342966c6890602401600060405180830381600087803b15801561027957600080fd5b505af115801561028d573d6000803e3d6000fd5b50505050949350505050565b6000805467ffffffffffffffff1690600190806102b683856103b6565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555095945050505050565b803563ffffffff811681146102f957600080fd5b919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146102f957600080fd5b6000806000806080858703121561033857600080fd5b84359350610348602086016102e5565b92506040850135915061035d606086016102fe565b905092959194509250565b600080600080600060a0868803121561038057600080fd5b85359450610390602087016102e5565b9350604086013592506103a5606087016102fe565b949793965091946080013592915050565b67ffffffffffffffff8181168382160190808211156103fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5092915050565b60006020828403121561041757600080fd5b8151801515811461042757600080fd5b939250505056fea2646970667358221220e2443bd7c2d259a396182acb566d2fcfb62aa5833dc16e407979477087a2c43b64736f6c63430008160033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "contract MockToken";
            readonly name: "_token";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint64";
            readonly name: "nonce";
            readonly type: "uint64";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "burnToken";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "depositor";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "mintRecipient";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "destinationDomain";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "destinationTokenMessenger";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "destinationCaller";
            readonly type: "bytes32";
        }];
        readonly name: "DepositForBurn";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_burnToken";
            readonly type: "address";
        }];
        readonly name: "depositForBurn";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "depositForBurnWithCaller";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageBodyVersion";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): MockCircleTokenMessengerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockCircleTokenMessenger;
}
export {};
//# sourceMappingURL=MockCircleTokenMessenger__factory.d.ts.map