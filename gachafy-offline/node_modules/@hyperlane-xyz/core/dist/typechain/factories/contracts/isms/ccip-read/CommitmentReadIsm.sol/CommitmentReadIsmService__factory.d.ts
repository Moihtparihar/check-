import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { CommitmentReadIsmService, CommitmentReadIsmServiceInterface } from "../../../../../contracts/isms/ccip-read/CommitmentReadIsm.sol/CommitmentReadIsmService.js";
export declare class CommitmentReadIsmService__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "getCallsFromRevealMessage";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "ica";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "salt";
            readonly type: "bytes32";
        }, {
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct CallLib.Call[]";
            readonly name: "_calls";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): CommitmentReadIsmServiceInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): CommitmentReadIsmService;
}
//# sourceMappingURL=CommitmentReadIsmService__factory.d.ts.map