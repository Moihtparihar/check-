// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/interchain_security/v1/tx.proto
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
import { Route } from './types.js';
export const protobufPackage = 'hyperlane.core.interchain_security.v1';
function createBaseMsgCreateMessageIdMultisigIsm() {
    return { creator: '', validators: [], threshold: 0 };
}
export const MsgCreateMessageIdMultisigIsm = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.creator !== '') {
            writer.uint32(10).string(message.creator);
        }
        for (const v of message.validators) {
            writer.uint32(18).string(v);
        }
        if (message.threshold !== 0) {
            writer.uint32(24).uint32(message.threshold);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateMessageIdMultisigIsm();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.validators.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.threshold = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: isSet(object.creator) ? globalThis.String(object.creator) : '',
            validators: globalThis.Array.isArray(object?.validators)
                ? object.validators.map((e) => globalThis.String(e))
                : [],
            threshold: isSet(object.threshold)
                ? globalThis.Number(object.threshold)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.creator !== '') {
            obj.creator = message.creator;
        }
        if (message.validators?.length) {
            obj.validators = message.validators;
        }
        if (message.threshold !== 0) {
            obj.threshold = Math.round(message.threshold);
        }
        return obj;
    },
    create(base) {
        return MsgCreateMessageIdMultisigIsm.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCreateMessageIdMultisigIsm();
        message.creator = object.creator ?? '';
        message.validators = object.validators?.map((e) => e) || [];
        message.threshold = object.threshold ?? 0;
        return message;
    },
};
function createBaseMsgCreateMessageIdMultisigIsmResponse() {
    return { id: '' };
}
export const MsgCreateMessageIdMultisigIsmResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== '') {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateMessageIdMultisigIsmResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== '') {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return MsgCreateMessageIdMultisigIsmResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCreateMessageIdMultisigIsmResponse();
        message.id = object.id ?? '';
        return message;
    },
};
function createBaseMsgCreateMerkleRootMultisigIsm() {
    return { creator: '', validators: [], threshold: 0 };
}
export const MsgCreateMerkleRootMultisigIsm = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.creator !== '') {
            writer.uint32(10).string(message.creator);
        }
        for (const v of message.validators) {
            writer.uint32(18).string(v);
        }
        if (message.threshold !== 0) {
            writer.uint32(24).uint32(message.threshold);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateMerkleRootMultisigIsm();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.validators.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.threshold = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: isSet(object.creator) ? globalThis.String(object.creator) : '',
            validators: globalThis.Array.isArray(object?.validators)
                ? object.validators.map((e) => globalThis.String(e))
                : [],
            threshold: isSet(object.threshold)
                ? globalThis.Number(object.threshold)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.creator !== '') {
            obj.creator = message.creator;
        }
        if (message.validators?.length) {
            obj.validators = message.validators;
        }
        if (message.threshold !== 0) {
            obj.threshold = Math.round(message.threshold);
        }
        return obj;
    },
    create(base) {
        return MsgCreateMerkleRootMultisigIsm.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCreateMerkleRootMultisigIsm();
        message.creator = object.creator ?? '';
        message.validators = object.validators?.map((e) => e) || [];
        message.threshold = object.threshold ?? 0;
        return message;
    },
};
function createBaseMsgCreateMerkleRootMultisigIsmResponse() {
    return { id: '' };
}
export const MsgCreateMerkleRootMultisigIsmResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== '') {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateMerkleRootMultisigIsmResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== '') {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return MsgCreateMerkleRootMultisigIsmResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCreateMerkleRootMultisigIsmResponse();
        message.id = object.id ?? '';
        return message;
    },
};
function createBaseMsgCreateNoopIsm() {
    return { creator: '' };
}
export const MsgCreateNoopIsm = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.creator !== '') {
            writer.uint32(10).string(message.creator);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateNoopIsm();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: isSet(object.creator) ? globalThis.String(object.creator) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.creator !== '') {
            obj.creator = message.creator;
        }
        return obj;
    },
    create(base) {
        return MsgCreateNoopIsm.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCreateNoopIsm();
        message.creator = object.creator ?? '';
        return message;
    },
};
function createBaseMsgCreateNoopIsmResponse() {
    return { id: '' };
}
export const MsgCreateNoopIsmResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== '') {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateNoopIsmResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== '') {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return MsgCreateNoopIsmResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCreateNoopIsmResponse();
        message.id = object.id ?? '';
        return message;
    },
};
function createBaseMsgAnnounceValidator() {
    return {
        validator: '',
        storage_location: '',
        signature: '',
        mailbox_id: '',
        creator: '',
    };
}
export const MsgAnnounceValidator = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.validator !== '') {
            writer.uint32(10).string(message.validator);
        }
        if (message.storage_location !== '') {
            writer.uint32(18).string(message.storage_location);
        }
        if (message.signature !== '') {
            writer.uint32(26).string(message.signature);
        }
        if (message.mailbox_id !== '') {
            writer.uint32(34).string(message.mailbox_id);
        }
        if (message.creator !== '') {
            writer.uint32(42).string(message.creator);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAnnounceValidator();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.validator = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.storage_location = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.signature = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.mailbox_id = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            validator: isSet(object.validator)
                ? globalThis.String(object.validator)
                : '',
            storage_location: isSet(object.storage_location)
                ? globalThis.String(object.storage_location)
                : '',
            signature: isSet(object.signature)
                ? globalThis.String(object.signature)
                : '',
            mailbox_id: isSet(object.mailbox_id)
                ? globalThis.String(object.mailbox_id)
                : '',
            creator: isSet(object.creator) ? globalThis.String(object.creator) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.validator !== '') {
            obj.validator = message.validator;
        }
        if (message.storage_location !== '') {
            obj.storage_location = message.storage_location;
        }
        if (message.signature !== '') {
            obj.signature = message.signature;
        }
        if (message.mailbox_id !== '') {
            obj.mailbox_id = message.mailbox_id;
        }
        if (message.creator !== '') {
            obj.creator = message.creator;
        }
        return obj;
    },
    create(base) {
        return MsgAnnounceValidator.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgAnnounceValidator();
        message.validator = object.validator ?? '';
        message.storage_location = object.storage_location ?? '';
        message.signature = object.signature ?? '';
        message.mailbox_id = object.mailbox_id ?? '';
        message.creator = object.creator ?? '';
        return message;
    },
};
function createBaseMsgAnnounceValidatorResponse() {
    return {};
}
export const MsgAnnounceValidatorResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAnnounceValidatorResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgAnnounceValidatorResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgAnnounceValidatorResponse();
        return message;
    },
};
function createBaseMsgCreateRoutingIsm() {
    return { creator: '', routes: [] };
}
export const MsgCreateRoutingIsm = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.creator !== '') {
            writer.uint32(10).string(message.creator);
        }
        for (const v of message.routes) {
            Route.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateRoutingIsm();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.routes.push(Route.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: isSet(object.creator) ? globalThis.String(object.creator) : '',
            routes: globalThis.Array.isArray(object?.routes)
                ? object.routes.map((e) => Route.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.creator !== '') {
            obj.creator = message.creator;
        }
        if (message.routes?.length) {
            obj.routes = message.routes.map((e) => Route.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return MsgCreateRoutingIsm.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCreateRoutingIsm();
        message.creator = object.creator ?? '';
        message.routes = object.routes?.map((e) => Route.fromPartial(e)) || [];
        return message;
    },
};
function createBaseMsgCreateRoutingIsmResponse() {
    return { id: '' };
}
export const MsgCreateRoutingIsmResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== '') {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateRoutingIsmResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : '' };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== '') {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return MsgCreateRoutingIsmResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgCreateRoutingIsmResponse();
        message.id = object.id ?? '';
        return message;
    },
};
function createBaseMsgSetRoutingIsmDomain() {
    return { ism_id: '', route: undefined, owner: '' };
}
export const MsgSetRoutingIsmDomain = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.ism_id !== '') {
            writer.uint32(10).string(message.ism_id);
        }
        if (message.route !== undefined) {
            Route.encode(message.route, writer.uint32(18).fork()).ldelim();
        }
        if (message.owner !== '') {
            writer.uint32(26).string(message.owner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetRoutingIsmDomain();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.ism_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.route = Route.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
            route: isSet(object.route) ? Route.fromJSON(object.route) : undefined,
            owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ism_id !== '') {
            obj.ism_id = message.ism_id;
        }
        if (message.route !== undefined) {
            obj.route = Route.toJSON(message.route);
        }
        if (message.owner !== '') {
            obj.owner = message.owner;
        }
        return obj;
    },
    create(base) {
        return MsgSetRoutingIsmDomain.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgSetRoutingIsmDomain();
        message.ism_id = object.ism_id ?? '';
        message.route =
            object.route !== undefined && object.route !== null
                ? Route.fromPartial(object.route)
                : undefined;
        message.owner = object.owner ?? '';
        return message;
    },
};
function createBaseMsgSetRoutingIsmDomainResponse() {
    return {};
}
export const MsgSetRoutingIsmDomainResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetRoutingIsmDomainResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgSetRoutingIsmDomainResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgSetRoutingIsmDomainResponse();
        return message;
    },
};
function createBaseMsgRemoveRoutingIsmDomain() {
    return { ism_id: '', domain: 0, owner: '' };
}
export const MsgRemoveRoutingIsmDomain = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.ism_id !== '') {
            writer.uint32(10).string(message.ism_id);
        }
        if (message.domain !== 0) {
            writer.uint32(16).uint32(message.domain);
        }
        if (message.owner !== '') {
            writer.uint32(26).string(message.owner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRemoveRoutingIsmDomain();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.ism_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.domain = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
            domain: isSet(object.domain) ? globalThis.Number(object.domain) : 0,
            owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ism_id !== '') {
            obj.ism_id = message.ism_id;
        }
        if (message.domain !== 0) {
            obj.domain = Math.round(message.domain);
        }
        if (message.owner !== '') {
            obj.owner = message.owner;
        }
        return obj;
    },
    create(base) {
        return MsgRemoveRoutingIsmDomain.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgRemoveRoutingIsmDomain();
        message.ism_id = object.ism_id ?? '';
        message.domain = object.domain ?? 0;
        message.owner = object.owner ?? '';
        return message;
    },
};
function createBaseMsgRemoveRoutingIsmDomainResponse() {
    return {};
}
export const MsgRemoveRoutingIsmDomainResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRemoveRoutingIsmDomainResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgRemoveRoutingIsmDomainResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgRemoveRoutingIsmDomainResponse();
        return message;
    },
};
function createBaseMsgUpdateRoutingIsmOwner() {
    return { ism_id: '', owner: '', new_owner: '', renounce_ownership: false };
}
export const MsgUpdateRoutingIsmOwner = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.ism_id !== '') {
            writer.uint32(10).string(message.ism_id);
        }
        if (message.owner !== '') {
            writer.uint32(18).string(message.owner);
        }
        if (message.new_owner !== '') {
            writer.uint32(26).string(message.new_owner);
        }
        if (message.renounce_ownership !== false) {
            writer.uint32(32).bool(message.renounce_ownership);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateRoutingIsmOwner();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.ism_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.new_owner = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.renounce_ownership = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ism_id: isSet(object.ism_id) ? globalThis.String(object.ism_id) : '',
            owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
            new_owner: isSet(object.new_owner)
                ? globalThis.String(object.new_owner)
                : '',
            renounce_ownership: isSet(object.renounce_ownership)
                ? globalThis.Boolean(object.renounce_ownership)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ism_id !== '') {
            obj.ism_id = message.ism_id;
        }
        if (message.owner !== '') {
            obj.owner = message.owner;
        }
        if (message.new_owner !== '') {
            obj.new_owner = message.new_owner;
        }
        if (message.renounce_ownership !== false) {
            obj.renounce_ownership = message.renounce_ownership;
        }
        return obj;
    },
    create(base) {
        return MsgUpdateRoutingIsmOwner.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMsgUpdateRoutingIsmOwner();
        message.ism_id = object.ism_id ?? '';
        message.owner = object.owner ?? '';
        message.new_owner = object.new_owner ?? '';
        message.renounce_ownership = object.renounce_ownership ?? false;
        return message;
    },
};
function createBaseMsgUpdateRoutingIsmOwnerResponse() {
    return {};
}
export const MsgUpdateRoutingIsmOwnerResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateRoutingIsmOwnerResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgUpdateRoutingIsmOwnerResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateRoutingIsmOwnerResponse();
        return message;
    },
};
export const MsgServiceName = 'hyperlane.core.interchain_security.v1.Msg';
export class MsgClientImpl {
    rpc;
    service;
    constructor(rpc, opts) {
        this.service = opts?.service || MsgServiceName;
        this.rpc = rpc;
        this.CreateMessageIdMultisigIsm =
            this.CreateMessageIdMultisigIsm.bind(this);
        this.CreateMerkleRootMultisigIsm =
            this.CreateMerkleRootMultisigIsm.bind(this);
        this.CreateNoopIsm = this.CreateNoopIsm.bind(this);
        this.CreateRoutingIsm = this.CreateRoutingIsm.bind(this);
        this.SetRoutingIsmDomain = this.SetRoutingIsmDomain.bind(this);
        this.RemoveRoutingIsmDomain = this.RemoveRoutingIsmDomain.bind(this);
        this.UpdateRoutingIsmOwner = this.UpdateRoutingIsmOwner.bind(this);
        this.AnnounceValidator = this.AnnounceValidator.bind(this);
    }
    CreateMessageIdMultisigIsm(request) {
        const data = MsgCreateMessageIdMultisigIsm.encode(request).finish();
        const promise = this.rpc.request(this.service, 'CreateMessageIdMultisigIsm', data);
        return promise.then((data) => MsgCreateMessageIdMultisigIsmResponse.decode(_m0.Reader.create(data)));
    }
    CreateMerkleRootMultisigIsm(request) {
        const data = MsgCreateMerkleRootMultisigIsm.encode(request).finish();
        const promise = this.rpc.request(this.service, 'CreateMerkleRootMultisigIsm', data);
        return promise.then((data) => MsgCreateMerkleRootMultisigIsmResponse.decode(_m0.Reader.create(data)));
    }
    CreateNoopIsm(request) {
        const data = MsgCreateNoopIsm.encode(request).finish();
        const promise = this.rpc.request(this.service, 'CreateNoopIsm', data);
        return promise.then((data) => MsgCreateNoopIsmResponse.decode(_m0.Reader.create(data)));
    }
    CreateRoutingIsm(request) {
        const data = MsgCreateRoutingIsm.encode(request).finish();
        const promise = this.rpc.request(this.service, 'CreateRoutingIsm', data);
        return promise.then((data) => MsgCreateRoutingIsmResponse.decode(_m0.Reader.create(data)));
    }
    SetRoutingIsmDomain(request) {
        const data = MsgSetRoutingIsmDomain.encode(request).finish();
        const promise = this.rpc.request(this.service, 'SetRoutingIsmDomain', data);
        return promise.then((data) => MsgSetRoutingIsmDomainResponse.decode(_m0.Reader.create(data)));
    }
    RemoveRoutingIsmDomain(request) {
        const data = MsgRemoveRoutingIsmDomain.encode(request).finish();
        const promise = this.rpc.request(this.service, 'RemoveRoutingIsmDomain', data);
        return promise.then((data) => MsgRemoveRoutingIsmDomainResponse.decode(_m0.Reader.create(data)));
    }
    UpdateRoutingIsmOwner(request) {
        const data = MsgUpdateRoutingIsmOwner.encode(request).finish();
        const promise = this.rpc.request(this.service, 'UpdateRoutingIsmOwner', data);
        return promise.then((data) => MsgUpdateRoutingIsmOwnerResponse.decode(_m0.Reader.create(data)));
    }
    AnnounceValidator(request) {
        const data = MsgAnnounceValidator.encode(request).finish();
        const promise = this.rpc.request(this.service, 'AnnounceValidator', data);
        return promise.then((data) => MsgAnnounceValidatorResponse.decode(_m0.Reader.create(data)));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=tx.js.map