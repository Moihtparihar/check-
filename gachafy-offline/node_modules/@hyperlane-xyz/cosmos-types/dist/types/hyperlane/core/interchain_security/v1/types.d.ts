import _m0 from 'protobufjs/minimal.js';
export declare const protobufPackage = "hyperlane.core.interchain_security.v1";
/** Route */
export interface Route {
    /** ism ... */
    ism: string;
    /** domain ... */
    domain: number;
}
/** Routing ISM ... */
export interface RoutingISM {
    /** id ... */
    id: string;
    /** owner ... */
    owner: string;
    /**
     * Routes associated with the Routing ISM.
     * These are stored directly within the ISM to simplify the design,
     * as the number of routes is expected to remain small.
     * This approach avoids the added complexity of managing a separate
     * collection.
     */
    routes: Route[];
}
/** MessageIdMultisigISM ... */
export interface MessageIdMultisigISM {
    /** id ... */
    id: string;
    /** owner ... */
    owner: string;
    /**
     * validators
     * these are 20 byte long ethereum style addresses
     */
    validators: string[];
    /** threshold ... */
    threshold: number;
}
/** MerkleRootMultisigISM ... */
export interface MerkleRootMultisigISM {
    /** XXX ... */
    id: string;
    /** owner ... */
    owner: string;
    /**
     * validators
     * these are 20 byte long ethereum style addresses
     */
    validators: string[];
    /** threshold ... */
    threshold: number;
}
/** NoopISM ... */
export interface NoopISM {
    /** id ... */
    id: string;
    /** owner ... */
    owner: string;
}
export declare const Route: {
    encode(message: Route, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Route;
    fromJSON(object: any): Route;
    toJSON(message: Route): unknown;
    create<I extends {
        ism?: string | undefined;
        domain?: number | undefined;
    } & {
        ism?: string | undefined;
        domain?: number | undefined;
    } & { [K in Exclude<keyof I, keyof Route>]: never; }>(base?: I | undefined): Route;
    fromPartial<I_1 extends {
        ism?: string | undefined;
        domain?: number | undefined;
    } & {
        ism?: string | undefined;
        domain?: number | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof Route>]: never; }>(object: I_1): Route;
};
export declare const RoutingISM: {
    encode(message: RoutingISM, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RoutingISM;
    fromJSON(object: any): RoutingISM;
    toJSON(message: RoutingISM): unknown;
    create<I extends {
        id?: string | undefined;
        owner?: string | undefined;
        routes?: {
            ism?: string | undefined;
            domain?: number | undefined;
        }[] | undefined;
    } & {
        id?: string | undefined;
        owner?: string | undefined;
        routes?: ({
            ism?: string | undefined;
            domain?: number | undefined;
        }[] & ({
            ism?: string | undefined;
            domain?: number | undefined;
        } & {
            ism?: string | undefined;
            domain?: number | undefined;
        } & { [K in Exclude<keyof I["routes"][number], keyof Route>]: never; })[] & { [K_1 in Exclude<keyof I["routes"], keyof {
            ism?: string | undefined;
            domain?: number | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, keyof RoutingISM>]: never; }>(base?: I | undefined): RoutingISM;
    fromPartial<I_1 extends {
        id?: string | undefined;
        owner?: string | undefined;
        routes?: {
            ism?: string | undefined;
            domain?: number | undefined;
        }[] | undefined;
    } & {
        id?: string | undefined;
        owner?: string | undefined;
        routes?: ({
            ism?: string | undefined;
            domain?: number | undefined;
        }[] & ({
            ism?: string | undefined;
            domain?: number | undefined;
        } & {
            ism?: string | undefined;
            domain?: number | undefined;
        } & { [K_3 in Exclude<keyof I_1["routes"][number], keyof Route>]: never; })[] & { [K_4 in Exclude<keyof I_1["routes"], keyof {
            ism?: string | undefined;
            domain?: number | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, keyof RoutingISM>]: never; }>(object: I_1): RoutingISM;
};
export declare const MessageIdMultisigISM: {
    encode(message: MessageIdMultisigISM, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MessageIdMultisigISM;
    fromJSON(object: any): MessageIdMultisigISM;
    toJSON(message: MessageIdMultisigISM): unknown;
    create<I extends {
        id?: string | undefined;
        owner?: string | undefined;
        validators?: string[] | undefined;
        threshold?: number | undefined;
    } & {
        id?: string | undefined;
        owner?: string | undefined;
        validators?: (string[] & string[] & { [K in Exclude<keyof I["validators"], keyof string[]>]: never; }) | undefined;
        threshold?: number | undefined;
    } & { [K_1 in Exclude<keyof I, keyof MessageIdMultisigISM>]: never; }>(base?: I | undefined): MessageIdMultisigISM;
    fromPartial<I_1 extends {
        id?: string | undefined;
        owner?: string | undefined;
        validators?: string[] | undefined;
        threshold?: number | undefined;
    } & {
        id?: string | undefined;
        owner?: string | undefined;
        validators?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["validators"], keyof string[]>]: never; }) | undefined;
        threshold?: number | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof MessageIdMultisigISM>]: never; }>(object: I_1): MessageIdMultisigISM;
};
export declare const MerkleRootMultisigISM: {
    encode(message: MerkleRootMultisigISM, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MerkleRootMultisigISM;
    fromJSON(object: any): MerkleRootMultisigISM;
    toJSON(message: MerkleRootMultisigISM): unknown;
    create<I extends {
        id?: string | undefined;
        owner?: string | undefined;
        validators?: string[] | undefined;
        threshold?: number | undefined;
    } & {
        id?: string | undefined;
        owner?: string | undefined;
        validators?: (string[] & string[] & { [K in Exclude<keyof I["validators"], keyof string[]>]: never; }) | undefined;
        threshold?: number | undefined;
    } & { [K_1 in Exclude<keyof I, keyof MerkleRootMultisigISM>]: never; }>(base?: I | undefined): MerkleRootMultisigISM;
    fromPartial<I_1 extends {
        id?: string | undefined;
        owner?: string | undefined;
        validators?: string[] | undefined;
        threshold?: number | undefined;
    } & {
        id?: string | undefined;
        owner?: string | undefined;
        validators?: (string[] & string[] & { [K_2 in Exclude<keyof I_1["validators"], keyof string[]>]: never; }) | undefined;
        threshold?: number | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof MerkleRootMultisigISM>]: never; }>(object: I_1): MerkleRootMultisigISM;
};
export declare const NoopISM: {
    encode(message: NoopISM, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NoopISM;
    fromJSON(object: any): NoopISM;
    toJSON(message: NoopISM): unknown;
    create<I extends {
        id?: string | undefined;
        owner?: string | undefined;
    } & {
        id?: string | undefined;
        owner?: string | undefined;
    } & { [K in Exclude<keyof I, keyof NoopISM>]: never; }>(base?: I | undefined): NoopISM;
    fromPartial<I_1 extends {
        id?: string | undefined;
        owner?: string | undefined;
    } & {
        id?: string | undefined;
        owner?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof NoopISM>]: never; }>(object: I_1): NoopISM;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
//# sourceMappingURL=types.d.ts.map