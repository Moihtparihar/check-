// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/post_dispatch/v1/events.proto
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
export const protobufPackage = 'hyperlane.core.post_dispatch.v1';
function createBaseEventCreateMerkleTreeHook() {
    return { merkle_tree_hook_id: '', mailbox_id: '', owner: '' };
}
export const EventCreateMerkleTreeHook = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.merkle_tree_hook_id !== '') {
            writer.uint32(10).string(message.merkle_tree_hook_id);
        }
        if (message.mailbox_id !== '') {
            writer.uint32(18).string(message.mailbox_id);
        }
        if (message.owner !== '') {
            writer.uint32(26).string(message.owner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCreateMerkleTreeHook();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.merkle_tree_hook_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.mailbox_id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            merkle_tree_hook_id: isSet(object.merkle_tree_hook_id)
                ? globalThis.String(object.merkle_tree_hook_id)
                : '',
            mailbox_id: isSet(object.mailbox_id)
                ? globalThis.String(object.mailbox_id)
                : '',
            owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.merkle_tree_hook_id !== '') {
            obj.merkle_tree_hook_id = message.merkle_tree_hook_id;
        }
        if (message.mailbox_id !== '') {
            obj.mailbox_id = message.mailbox_id;
        }
        if (message.owner !== '') {
            obj.owner = message.owner;
        }
        return obj;
    },
    create(base) {
        return EventCreateMerkleTreeHook.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventCreateMerkleTreeHook();
        message.merkle_tree_hook_id = object.merkle_tree_hook_id ?? '';
        message.mailbox_id = object.mailbox_id ?? '';
        message.owner = object.owner ?? '';
        return message;
    },
};
function createBaseEventInsertedIntoTree() {
    return { message_id: '', index: 0, merkle_tree_hook_id: '' };
}
export const EventInsertedIntoTree = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.message_id !== '') {
            writer.uint32(10).string(message.message_id);
        }
        if (message.index !== 0) {
            writer.uint32(16).uint32(message.index);
        }
        if (message.merkle_tree_hook_id !== '') {
            writer.uint32(26).string(message.merkle_tree_hook_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventInsertedIntoTree();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.index = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.merkle_tree_hook_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message_id: isSet(object.message_id)
                ? globalThis.String(object.message_id)
                : '',
            index: isSet(object.index) ? globalThis.Number(object.index) : 0,
            merkle_tree_hook_id: isSet(object.merkle_tree_hook_id)
                ? globalThis.String(object.merkle_tree_hook_id)
                : '',
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.message_id !== '') {
            obj.message_id = message.message_id;
        }
        if (message.index !== 0) {
            obj.index = Math.round(message.index);
        }
        if (message.merkle_tree_hook_id !== '') {
            obj.merkle_tree_hook_id = message.merkle_tree_hook_id;
        }
        return obj;
    },
    create(base) {
        return EventInsertedIntoTree.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventInsertedIntoTree();
        message.message_id = object.message_id ?? '';
        message.index = object.index ?? 0;
        message.merkle_tree_hook_id = object.merkle_tree_hook_id ?? '';
        return message;
    },
};
function createBaseEventGasPayment() {
    return {
        message_id: '',
        destination: 0,
        gas_amount: '',
        payment: '',
        igp_id: '',
    };
}
export const EventGasPayment = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.message_id !== '') {
            writer.uint32(10).string(message.message_id);
        }
        if (message.destination !== 0) {
            writer.uint32(16).uint32(message.destination);
        }
        if (message.gas_amount !== '') {
            writer.uint32(26).string(message.gas_amount);
        }
        if (message.payment !== '') {
            writer.uint32(34).string(message.payment);
        }
        if (message.igp_id !== '') {
            writer.uint32(42).string(message.igp_id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventGasPayment();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.destination = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.gas_amount = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.payment = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.igp_id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            message_id: isSet(object.message_id)
                ? globalThis.String(object.message_id)
                : '',
            destination: isSet(object.destination)
                ? globalThis.Number(object.destination)
                : 0,
            gas_amount: isSet(object.gas_amount)
                ? globalThis.String(object.gas_amount)
                : '',
            payment: isSet(object.payment) ? globalThis.String(object.payment) : '',
            igp_id: isSet(object.igp_id) ? globalThis.String(object.igp_id) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.message_id !== '') {
            obj.message_id = message.message_id;
        }
        if (message.destination !== 0) {
            obj.destination = Math.round(message.destination);
        }
        if (message.gas_amount !== '') {
            obj.gas_amount = message.gas_amount;
        }
        if (message.payment !== '') {
            obj.payment = message.payment;
        }
        if (message.igp_id !== '') {
            obj.igp_id = message.igp_id;
        }
        return obj;
    },
    create(base) {
        return EventGasPayment.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventGasPayment();
        message.message_id = object.message_id ?? '';
        message.destination = object.destination ?? 0;
        message.gas_amount = object.gas_amount ?? '';
        message.payment = object.payment ?? '';
        message.igp_id = object.igp_id ?? '';
        return message;
    },
};
function createBaseEventCreateNoopHook() {
    return { noop_hook_id: '', owner: '' };
}
export const EventCreateNoopHook = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.noop_hook_id !== '') {
            writer.uint32(10).string(message.noop_hook_id);
        }
        if (message.owner !== '') {
            writer.uint32(18).string(message.owner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCreateNoopHook();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.noop_hook_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            noop_hook_id: isSet(object.noop_hook_id)
                ? globalThis.String(object.noop_hook_id)
                : '',
            owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.noop_hook_id !== '') {
            obj.noop_hook_id = message.noop_hook_id;
        }
        if (message.owner !== '') {
            obj.owner = message.owner;
        }
        return obj;
    },
    create(base) {
        return EventCreateNoopHook.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventCreateNoopHook();
        message.noop_hook_id = object.noop_hook_id ?? '';
        message.owner = object.owner ?? '';
        return message;
    },
};
function createBaseEventCreateIgp() {
    return { igp_id: '', owner: '', denom: '' };
}
export const EventCreateIgp = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.igp_id !== '') {
            writer.uint32(10).string(message.igp_id);
        }
        if (message.owner !== '') {
            writer.uint32(18).string(message.owner);
        }
        if (message.denom !== '') {
            writer.uint32(26).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventCreateIgp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.igp_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            igp_id: isSet(object.igp_id) ? globalThis.String(object.igp_id) : '',
            owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
            denom: isSet(object.denom) ? globalThis.String(object.denom) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.igp_id !== '') {
            obj.igp_id = message.igp_id;
        }
        if (message.owner !== '') {
            obj.owner = message.owner;
        }
        if (message.denom !== '') {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return EventCreateIgp.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventCreateIgp();
        message.igp_id = object.igp_id ?? '';
        message.owner = object.owner ?? '';
        message.denom = object.denom ?? '';
        return message;
    },
};
function createBaseEventSetIgp() {
    return { igp_id: '', owner: '', new_owner: '', renounce_ownership: false };
}
export const EventSetIgp = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.igp_id !== '') {
            writer.uint32(10).string(message.igp_id);
        }
        if (message.owner !== '') {
            writer.uint32(18).string(message.owner);
        }
        if (message.new_owner !== '') {
            writer.uint32(26).string(message.new_owner);
        }
        if (message.renounce_ownership !== false) {
            writer.uint32(32).bool(message.renounce_ownership);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventSetIgp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.igp_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.new_owner = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.renounce_ownership = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            igp_id: isSet(object.igp_id) ? globalThis.String(object.igp_id) : '',
            owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
            new_owner: isSet(object.new_owner)
                ? globalThis.String(object.new_owner)
                : '',
            renounce_ownership: isSet(object.renounce_ownership)
                ? globalThis.Boolean(object.renounce_ownership)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.igp_id !== '') {
            obj.igp_id = message.igp_id;
        }
        if (message.owner !== '') {
            obj.owner = message.owner;
        }
        if (message.new_owner !== '') {
            obj.new_owner = message.new_owner;
        }
        if (message.renounce_ownership !== false) {
            obj.renounce_ownership = message.renounce_ownership;
        }
        return obj;
    },
    create(base) {
        return EventSetIgp.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventSetIgp();
        message.igp_id = object.igp_id ?? '';
        message.owner = object.owner ?? '';
        message.new_owner = object.new_owner ?? '';
        message.renounce_ownership = object.renounce_ownership ?? false;
        return message;
    },
};
function createBaseEventSetDestinationGasConfig() {
    return {
        igp_id: '',
        owner: '',
        remote_domain: 0,
        gas_overhead: '',
        gas_price: '',
        token_exchange_rate: '',
    };
}
export const EventSetDestinationGasConfig = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.igp_id !== '') {
            writer.uint32(10).string(message.igp_id);
        }
        if (message.owner !== '') {
            writer.uint32(18).string(message.owner);
        }
        if (message.remote_domain !== 0) {
            writer.uint32(32).uint32(message.remote_domain);
        }
        if (message.gas_overhead !== '') {
            writer.uint32(42).string(message.gas_overhead);
        }
        if (message.gas_price !== '') {
            writer.uint32(50).string(message.gas_price);
        }
        if (message.token_exchange_rate !== '') {
            writer.uint32(58).string(message.token_exchange_rate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventSetDestinationGasConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.igp_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.remote_domain = reader.uint32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.gas_overhead = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.gas_price = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.token_exchange_rate = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            igp_id: isSet(object.igp_id) ? globalThis.String(object.igp_id) : '',
            owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
            remote_domain: isSet(object.remote_domain)
                ? globalThis.Number(object.remote_domain)
                : 0,
            gas_overhead: isSet(object.gas_overhead)
                ? globalThis.String(object.gas_overhead)
                : '',
            gas_price: isSet(object.gas_price)
                ? globalThis.String(object.gas_price)
                : '',
            token_exchange_rate: isSet(object.token_exchange_rate)
                ? globalThis.String(object.token_exchange_rate)
                : '',
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.igp_id !== '') {
            obj.igp_id = message.igp_id;
        }
        if (message.owner !== '') {
            obj.owner = message.owner;
        }
        if (message.remote_domain !== 0) {
            obj.remote_domain = Math.round(message.remote_domain);
        }
        if (message.gas_overhead !== '') {
            obj.gas_overhead = message.gas_overhead;
        }
        if (message.gas_price !== '') {
            obj.gas_price = message.gas_price;
        }
        if (message.token_exchange_rate !== '') {
            obj.token_exchange_rate = message.token_exchange_rate;
        }
        return obj;
    },
    create(base) {
        return EventSetDestinationGasConfig.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventSetDestinationGasConfig();
        message.igp_id = object.igp_id ?? '';
        message.owner = object.owner ?? '';
        message.remote_domain = object.remote_domain ?? 0;
        message.gas_overhead = object.gas_overhead ?? '';
        message.gas_price = object.gas_price ?? '';
        message.token_exchange_rate = object.token_exchange_rate ?? '';
        return message;
    },
};
function createBaseEventClaimIgp() {
    return { igp_id: '', owner: '', amount: '' };
}
export const EventClaimIgp = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.igp_id !== '') {
            writer.uint32(10).string(message.igp_id);
        }
        if (message.owner !== '') {
            writer.uint32(18).string(message.owner);
        }
        if (message.amount !== '') {
            writer.uint32(26).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventClaimIgp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.igp_id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            igp_id: isSet(object.igp_id) ? globalThis.String(object.igp_id) : '',
            owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
            amount: isSet(object.amount) ? globalThis.String(object.amount) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.igp_id !== '') {
            obj.igp_id = message.igp_id;
        }
        if (message.owner !== '') {
            obj.owner = message.owner;
        }
        if (message.amount !== '') {
            obj.amount = message.amount;
        }
        return obj;
    },
    create(base) {
        return EventClaimIgp.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseEventClaimIgp();
        message.igp_id = object.igp_id ?? '';
        message.owner = object.owner ?? '';
        message.amount = object.amount ?? '';
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=events.js.map