import _m0 from 'protobufjs/minimal.js';
export declare const protobufPackage = "hyperlane.core.v1";
/** EventDispatch ... */
export interface EventDispatch {
    /** origin_mailbox_id ... */
    origin_mailbox_id: string;
    /** sender ... */
    sender: string;
    /** destination ... */
    destination: number;
    /** recipient ... */
    recipient: string;
    /** message ... */
    message: string;
}
/** EventProcess ... */
export interface EventProcess {
    /** origin_mailbox_id ... */
    origin_mailbox_id: string;
    /** origin ... */
    origin: number;
    /** sender ... */
    sender: string;
    /** recipient ... */
    recipient: string;
    /** message_id ... */
    message_id: string;
    /** message ... */
    message: string;
}
/** EventCreateMailbox ... */
export interface EventCreateMailbox {
    /** mailbox_id ... */
    mailbox_id: string;
    /** owner ... */
    owner: string;
    /** default_ism ... */
    default_ism: string;
    /** default_hook ... */
    default_hook: string;
    /** required_hook ... */
    required_hook: string;
    /** local_domain ... */
    local_domain: number;
}
/** EventSetMailbox ... */
export interface EventSetMailbox {
    /** mailbox_id ... */
    mailbox_id: string;
    /** owner ... */
    owner: string;
    /** default_ism ... */
    default_ism: string;
    /** default_hook ... */
    default_hook: string;
    /** new_owner ... */
    new_owner: string;
    /** renounce_ownership ... */
    renounce_ownership: boolean;
}
export declare const EventDispatch: {
    encode(message: EventDispatch, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventDispatch;
    fromJSON(object: any): EventDispatch;
    toJSON(message: EventDispatch): unknown;
    create<I extends {
        origin_mailbox_id?: string | undefined;
        sender?: string | undefined;
        destination?: number | undefined;
        recipient?: string | undefined;
        message?: string | undefined;
    } & {
        origin_mailbox_id?: string | undefined;
        sender?: string | undefined;
        destination?: number | undefined;
        recipient?: string | undefined;
        message?: string | undefined;
    } & { [K in Exclude<keyof I, keyof EventDispatch>]: never; }>(base?: I | undefined): EventDispatch;
    fromPartial<I_1 extends {
        origin_mailbox_id?: string | undefined;
        sender?: string | undefined;
        destination?: number | undefined;
        recipient?: string | undefined;
        message?: string | undefined;
    } & {
        origin_mailbox_id?: string | undefined;
        sender?: string | undefined;
        destination?: number | undefined;
        recipient?: string | undefined;
        message?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof EventDispatch>]: never; }>(object: I_1): EventDispatch;
};
export declare const EventProcess: {
    encode(message: EventProcess, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventProcess;
    fromJSON(object: any): EventProcess;
    toJSON(message: EventProcess): unknown;
    create<I extends {
        origin_mailbox_id?: string | undefined;
        origin?: number | undefined;
        sender?: string | undefined;
        recipient?: string | undefined;
        message_id?: string | undefined;
        message?: string | undefined;
    } & {
        origin_mailbox_id?: string | undefined;
        origin?: number | undefined;
        sender?: string | undefined;
        recipient?: string | undefined;
        message_id?: string | undefined;
        message?: string | undefined;
    } & { [K in Exclude<keyof I, keyof EventProcess>]: never; }>(base?: I | undefined): EventProcess;
    fromPartial<I_1 extends {
        origin_mailbox_id?: string | undefined;
        origin?: number | undefined;
        sender?: string | undefined;
        recipient?: string | undefined;
        message_id?: string | undefined;
        message?: string | undefined;
    } & {
        origin_mailbox_id?: string | undefined;
        origin?: number | undefined;
        sender?: string | undefined;
        recipient?: string | undefined;
        message_id?: string | undefined;
        message?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof EventProcess>]: never; }>(object: I_1): EventProcess;
};
export declare const EventCreateMailbox: {
    encode(message: EventCreateMailbox, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventCreateMailbox;
    fromJSON(object: any): EventCreateMailbox;
    toJSON(message: EventCreateMailbox): unknown;
    create<I extends {
        mailbox_id?: string | undefined;
        owner?: string | undefined;
        default_ism?: string | undefined;
        default_hook?: string | undefined;
        required_hook?: string | undefined;
        local_domain?: number | undefined;
    } & {
        mailbox_id?: string | undefined;
        owner?: string | undefined;
        default_ism?: string | undefined;
        default_hook?: string | undefined;
        required_hook?: string | undefined;
        local_domain?: number | undefined;
    } & { [K in Exclude<keyof I, keyof EventCreateMailbox>]: never; }>(base?: I | undefined): EventCreateMailbox;
    fromPartial<I_1 extends {
        mailbox_id?: string | undefined;
        owner?: string | undefined;
        default_ism?: string | undefined;
        default_hook?: string | undefined;
        required_hook?: string | undefined;
        local_domain?: number | undefined;
    } & {
        mailbox_id?: string | undefined;
        owner?: string | undefined;
        default_ism?: string | undefined;
        default_hook?: string | undefined;
        required_hook?: string | undefined;
        local_domain?: number | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof EventCreateMailbox>]: never; }>(object: I_1): EventCreateMailbox;
};
export declare const EventSetMailbox: {
    encode(message: EventSetMailbox, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventSetMailbox;
    fromJSON(object: any): EventSetMailbox;
    toJSON(message: EventSetMailbox): unknown;
    create<I extends {
        mailbox_id?: string | undefined;
        owner?: string | undefined;
        default_ism?: string | undefined;
        default_hook?: string | undefined;
        new_owner?: string | undefined;
        renounce_ownership?: boolean | undefined;
    } & {
        mailbox_id?: string | undefined;
        owner?: string | undefined;
        default_ism?: string | undefined;
        default_hook?: string | undefined;
        new_owner?: string | undefined;
        renounce_ownership?: boolean | undefined;
    } & { [K in Exclude<keyof I, keyof EventSetMailbox>]: never; }>(base?: I | undefined): EventSetMailbox;
    fromPartial<I_1 extends {
        mailbox_id?: string | undefined;
        owner?: string | undefined;
        default_ism?: string | undefined;
        default_hook?: string | undefined;
        new_owner?: string | undefined;
        renounce_ownership?: boolean | undefined;
    } & {
        mailbox_id?: string | undefined;
        owner?: string | undefined;
        default_ism?: string | undefined;
        default_hook?: string | undefined;
        new_owner?: string | undefined;
        renounce_ownership?: boolean | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof EventSetMailbox>]: never; }>(object: I_1): EventSetMailbox;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
//# sourceMappingURL=events.d.ts.map