// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               unknown
// source: hyperlane/core/interchain_security/v1/types.proto
/* eslint-disable */
import _m0 from 'protobufjs/minimal.js';
export const protobufPackage = 'hyperlane.core.interchain_security.v1';
function createBaseRoute() {
    return { ism: '', domain: 0 };
}
export const Route = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.ism !== '') {
            writer.uint32(10).string(message.ism);
        }
        if (message.domain !== 0) {
            writer.uint32(16).uint32(message.domain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRoute();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.ism = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.domain = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ism: isSet(object.ism) ? globalThis.String(object.ism) : '',
            domain: isSet(object.domain) ? globalThis.Number(object.domain) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ism !== '') {
            obj.ism = message.ism;
        }
        if (message.domain !== 0) {
            obj.domain = Math.round(message.domain);
        }
        return obj;
    },
    create(base) {
        return Route.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRoute();
        message.ism = object.ism ?? '';
        message.domain = object.domain ?? 0;
        return message;
    },
};
function createBaseRoutingISM() {
    return { id: '', owner: '', routes: [] };
}
export const RoutingISM = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== '') {
            writer.uint32(10).string(message.id);
        }
        if (message.owner !== '') {
            writer.uint32(18).string(message.owner);
        }
        for (const v of message.routes) {
            Route.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRoutingISM();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.routes.push(Route.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : '',
            owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
            routes: globalThis.Array.isArray(object?.routes)
                ? object.routes.map((e) => Route.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== '') {
            obj.id = message.id;
        }
        if (message.owner !== '') {
            obj.owner = message.owner;
        }
        if (message.routes?.length) {
            obj.routes = message.routes.map((e) => Route.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return RoutingISM.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseRoutingISM();
        message.id = object.id ?? '';
        message.owner = object.owner ?? '';
        message.routes = object.routes?.map((e) => Route.fromPartial(e)) || [];
        return message;
    },
};
function createBaseMessageIdMultisigISM() {
    return { id: '', owner: '', validators: [], threshold: 0 };
}
export const MessageIdMultisigISM = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== '') {
            writer.uint32(10).string(message.id);
        }
        if (message.owner !== '') {
            writer.uint32(18).string(message.owner);
        }
        for (const v of message.validators) {
            writer.uint32(26).string(v);
        }
        if (message.threshold !== 0) {
            writer.uint32(32).uint32(message.threshold);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessageIdMultisigISM();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.validators.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.threshold = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : '',
            owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
            validators: globalThis.Array.isArray(object?.validators)
                ? object.validators.map((e) => globalThis.String(e))
                : [],
            threshold: isSet(object.threshold)
                ? globalThis.Number(object.threshold)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== '') {
            obj.id = message.id;
        }
        if (message.owner !== '') {
            obj.owner = message.owner;
        }
        if (message.validators?.length) {
            obj.validators = message.validators;
        }
        if (message.threshold !== 0) {
            obj.threshold = Math.round(message.threshold);
        }
        return obj;
    },
    create(base) {
        return MessageIdMultisigISM.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMessageIdMultisigISM();
        message.id = object.id ?? '';
        message.owner = object.owner ?? '';
        message.validators = object.validators?.map((e) => e) || [];
        message.threshold = object.threshold ?? 0;
        return message;
    },
};
function createBaseMerkleRootMultisigISM() {
    return { id: '', owner: '', validators: [], threshold: 0 };
}
export const MerkleRootMultisigISM = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== '') {
            writer.uint32(10).string(message.id);
        }
        if (message.owner !== '') {
            writer.uint32(18).string(message.owner);
        }
        for (const v of message.validators) {
            writer.uint32(26).string(v);
        }
        if (message.threshold !== 0) {
            writer.uint32(32).uint32(message.threshold);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMerkleRootMultisigISM();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.validators.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.threshold = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : '',
            owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
            validators: globalThis.Array.isArray(object?.validators)
                ? object.validators.map((e) => globalThis.String(e))
                : [],
            threshold: isSet(object.threshold)
                ? globalThis.Number(object.threshold)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== '') {
            obj.id = message.id;
        }
        if (message.owner !== '') {
            obj.owner = message.owner;
        }
        if (message.validators?.length) {
            obj.validators = message.validators;
        }
        if (message.threshold !== 0) {
            obj.threshold = Math.round(message.threshold);
        }
        return obj;
    },
    create(base) {
        return MerkleRootMultisigISM.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMerkleRootMultisigISM();
        message.id = object.id ?? '';
        message.owner = object.owner ?? '';
        message.validators = object.validators?.map((e) => e) || [];
        message.threshold = object.threshold ?? 0;
        return message;
    },
};
function createBaseNoopISM() {
    return { id: '', owner: '' };
}
export const NoopISM = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== '') {
            writer.uint32(10).string(message.id);
        }
        if (message.owner !== '') {
            writer.uint32(18).string(message.owner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNoopISM();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.owner = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : '',
            owner: isSet(object.owner) ? globalThis.String(object.owner) : '',
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== '') {
            obj.id = message.id;
        }
        if (message.owner !== '') {
            obj.owner = message.owner;
        }
        return obj;
    },
    create(base) {
        return NoopISM.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseNoopISM();
        message.id = object.id ?? '';
        message.owner = object.owner ?? '';
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=types.js.map