/**
 * Radix Core API
 * This API is exposed by the Babylon Radix node to give clients access to the Radix Engine, Mempool and State in the node.  The default configuration is intended for use by node-runners on a private network, and is not intended to be exposed publicly. Very heavy load may impact the node\'s function. The node exposes a configuration flag which allows disabling certain endpoints which may be problematic, but monitoring is advised. This configuration parameter is `api.core.flags.enable_unbounded_endpoints` / `RADIXDLT_CORE_API_FLAGS_ENABLE_UNBOUNDED_ENDPOINTS`.  This API exposes queries against the node\'s current state (see `/lts/state/` or `/state/`), and streams of transaction history (under `/lts/stream/` or `/stream`).  If you require queries against snapshots of historical ledger state, you may also wish to consider using the [Gateway API](https://docs-babylon.radixdlt.com/).  ## Integration and forward compatibility guarantees  Integrators (such as exchanges) are recommended to use the `/lts/` endpoints - they have been designed to be clear and simple for integrators wishing to create and monitor transactions involving fungible transfers to/from accounts.  All endpoints under `/lts/` have high guarantees of forward compatibility in future node versions. We may add new fields, but existing fields will not be changed. Assuming the integrating code uses a permissive JSON parser which ignores unknown fields, any additions will not affect existing code.  Other endpoints may be changed with new node versions carrying protocol-updates, although any breaking changes will be flagged clearly in the corresponding release notes.  All responses may have additional fields added, so clients are advised to use JSON parsers which ignore unknown fields on JSON objects.
 *
 * The version of the OpenAPI document: v1.3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface PreviewFlags
 */
export interface PreviewFlags {
    /**
     * If enabled, a large simulated pool of XRD is marked as locked.
     *
     * This mode can be used to estimate fees. To get a reliable estimate, we recommend that your
     * transaction is as close as possible to the real transaction. For example:
     * - You should still use a lock fee command, but you can set it to lock a fee of 0.
     * - You should include the public keys that will sign the transaction, so the cost of
     *   signature verification and payload size can be accounted for.
     * @type {boolean}
     * @memberof PreviewFlags
     */
    use_free_credit?: boolean;
    /**
     * If enabled, each manifest processor's auth zone will be given a simulated proof of
     * every signature, which can be used to pass signature access rules.
     *
     * This can be used to preview transactions even if the required signatures are not
     * known ahead of time.
     *
     * See the documentation on
     * [advanced access rules](https://docs.radixdlt.com/docs/advanced-accessrules#signature-requirements)
     * for more information.
     * @type {boolean}
     * @memberof PreviewFlags
     */
    assume_all_signature_proofs?: boolean;
    /**
     * If enabled, the various runtime epoch-related verifications are skipped:
     * - The `start_epoch_inclusive` and `end_epoch_exclusive` parameters, if specified, are ignored.
     * - The duplicate intent checks (which rely on the expiry epoch) are also ignored.
     *
     * However, if the start and end epoch are provided, they must still be statically valid.
     * We recommend using a value of `start_epoch_inclusive = 1` and `end_epoch_exclusive = 2` in this
     * case.
     * @type {boolean}
     * @memberof PreviewFlags
     */
    skip_epoch_check?: boolean;
    /**
     * If enabled, all authorization checks are skipped during execution.
     *
     * This could be used to e.g.:
     * * Preview protocol update style transactions.
     * * Mint resources for previewing trades with resources you don't own.
     *   If doing this, be warned: only resources which were potentially mintable/burnable
     *   at creation time will be mintable/burnable, due to feature flags on the resource.
     *
     * Warning: this mode of operation is quite a departure from normal operation:
     * * Calculated fees will likely be lower than a standard execution.
     * * This mode can subtly break invariants some dApp code might rely on, or result in unexpected
     *   behaviour, so the execution result might not be valid for your needs. For example,
     *   if this flag was used to mint pool units to preview a redemption (or some dApp interaction which
     *   behind the scenes redeemed them), they'd redeem for less than they're currently worth,
     *   because the blueprint code relies on the total supply of the pool units to calculate their
     *   redemption worth, and you've just inflated the total supply through the mint operation.
     * @type {boolean}
     * @memberof PreviewFlags
     */
    disable_auth_checks?: boolean;
}
/**
 * Check if a given object implements the PreviewFlags interface.
 */
export declare function instanceOfPreviewFlags(value: object): boolean;
export declare function PreviewFlagsFromJSON(json: any): PreviewFlags;
export declare function PreviewFlagsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PreviewFlags;
export declare function PreviewFlagsToJSON(value?: PreviewFlags | null): any;
